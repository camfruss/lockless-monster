<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classtesting_1_1_test" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>testing::Test</compoundname>
    <derivedcompoundref refid="classtesting_1_1_test_with_param" prot="public" virt="non-virtual">testing::TestWithParam&lt; int &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_test_with_param" prot="public" virt="non-virtual">testing::TestWithParam&lt; Unstreamable &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_test_with_param" prot="public" virt="non-virtual">testing::TestWithParam&lt; std::string &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_test_with_param" prot="public" virt="non-virtual">testing::TestWithParam&lt; CustomStruct &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_test_with_param" prot="public" virt="non-virtual">testing::TestWithParam&lt; MyEnums &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_test_with_param" prot="public" virt="non-virtual">testing::TestWithParam&lt; MyType &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_test_with_param" prot="public" virt="non-virtual">testing::TestWithParam&lt; bool &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_foo_test" prot="public" virt="non-virtual">FooTest</derivedcompoundref>
    <derivedcompoundref refid="class_typed_test" prot="public" virt="non-virtual">TypedTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_common_test" prot="public" virt="non-virtual">CommonTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_container_test" prot="public" virt="non-virtual">ContainerTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_detect_not_instantiated_types_test" prot="public" virt="non-virtual">DetectNotInstantiatedTypesTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_disabled_test" prot="public" virt="non-virtual">DisabledTest</derivedcompoundref>
    <derivedcompoundref refid="class_dynamic_fixture" prot="public" virt="non-virtual">DynamicFixture</derivedcompoundref>
    <derivedcompoundref refid="class_dynamic_unit_test_fixture" prot="public" virt="non-virtual">DynamicUnitTestFixture</derivedcompoundref>
    <derivedcompoundref refid="class_expect_failure_test" prot="public" virt="non-virtual">ExpectFailureTest</derivedcompoundref>
    <derivedcompoundref refid="class_failed_test" prot="public" virt="non-virtual">FailedTest</derivedcompoundref>
    <derivedcompoundref refid="class_fatal_failure_in_fixture_constructor_test" prot="public" virt="non-virtual">FatalFailureInFixtureConstructorTest</derivedcompoundref>
    <derivedcompoundref refid="class_fatal_failure_in_set_up_test" prot="public" virt="non-virtual">FatalFailureInSetUpTest</derivedcompoundref>
    <derivedcompoundref refid="class_fixture" prot="public" virt="non-virtual">Fixture</derivedcompoundref>
    <derivedcompoundref refid="class_foo_test" prot="public" virt="non-virtual">FooTest</derivedcompoundref>
    <derivedcompoundref refid="class_foo_test_fixture" prot="public" virt="non-virtual">FooTestFixture</derivedcompoundref>
    <derivedcompoundref refid="class_g_mock_output_test" prot="public" virt="non-virtual">GMockOutputTest</derivedcompoundref>
    <derivedcompoundref refid="class_macro_naming_test_non_parametrized" prot="public" virt="non-virtual">MacroNamingTestNonParametrized</derivedcompoundref>
    <derivedcompoundref refid="class_non_fatal_failure_in_fixture_constructor_test" prot="public" virt="non-virtual">NonFatalFailureInFixtureConstructorTest</derivedcompoundref>
    <derivedcompoundref refid="class_non_fatal_failure_in_set_up_test" prot="public" virt="non-virtual">NonFatalFailureInSetUpTest</derivedcompoundref>
    <derivedcompoundref refid="class_non_parameterized_base_test" prot="public" virt="non-virtual">NonParameterizedBaseTest</derivedcompoundref>
    <derivedcompoundref refid="class_predicate1_test" prot="public" virt="non-virtual">Predicate1Test</derivedcompoundref>
    <derivedcompoundref refid="class_predicate2_test" prot="public" virt="non-virtual">Predicate2Test</derivedcompoundref>
    <derivedcompoundref refid="class_predicate3_test" prot="public" virt="non-virtual">Predicate3Test</derivedcompoundref>
    <derivedcompoundref refid="class_predicate4_test" prot="public" virt="non-virtual">Predicate4Test</derivedcompoundref>
    <derivedcompoundref refid="class_predicate5_test" prot="public" virt="non-virtual">Predicate5Test</derivedcompoundref>
    <derivedcompoundref refid="class_property_one" prot="public" virt="non-virtual">PropertyOne</derivedcompoundref>
    <derivedcompoundref refid="class_property_recording_test" prot="public" virt="non-virtual">PropertyRecordingTest</derivedcompoundref>
    <derivedcompoundref refid="class_property_two" prot="public" virt="non-virtual">PropertyTwo</derivedcompoundref>
    <derivedcompoundref refid="class_protected_fixture_methods_test" prot="public" virt="non-virtual">ProtectedFixtureMethodsTest</derivedcompoundref>
    <derivedcompoundref refid="class_setup_fail_test" prot="public" virt="non-virtual">SetupFailTest</derivedcompoundref>
    <derivedcompoundref refid="class_setup_fail_test" prot="public" virt="non-virtual">SetupFailTest</derivedcompoundref>
    <derivedcompoundref refid="class_skipped_test" prot="public" virt="non-virtual">SkippedTest</derivedcompoundref>
    <derivedcompoundref refid="class_successful_test" prot="public" virt="non-virtual">SuccessfulTest</derivedcompoundref>
    <derivedcompoundref refid="class_t_e_s_t___f__before___t_e_s_t__in__same__test__case" prot="public" virt="non-virtual">TEST_F_before_TEST_in_same_test_case</derivedcompoundref>
    <derivedcompoundref refid="class_t_e_s_t__before___t_e_s_t___f__in__same__test__case" prot="public" virt="non-virtual">TEST_before_TEST_F_in_same_test_case</derivedcompoundref>
    <derivedcompoundref refid="class_tear_down_fail_test" prot="public" virt="non-virtual">TearDownFailTest</derivedcompoundref>
    <derivedcompoundref refid="class_tear_down_fail_test" prot="public" virt="non-virtual">TearDownFailTest</derivedcompoundref>
    <derivedcompoundref refid="class_test_suite_that_fails_to_set_up" prot="public" virt="non-virtual">TestSuiteThatFailsToSetUp</derivedcompoundref>
    <derivedcompoundref refid="class_test_suite_that_skips_in_set_up" prot="public" virt="non-virtual">TestSuiteThatSkipsInSetUp</derivedcompoundref>
    <derivedcompoundref refid="class_type_param_test" prot="public" virt="non-virtual">TypeParamTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_type_parameterized_test_suite" prot="public" virt="non-virtual">TypeParameterizedTestSuite&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_type_parameterized_test_suite" prot="public" virt="non-virtual">TypeParameterizedTestSuite&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_type_parametrized_test_with_names" prot="public" virt="non-virtual">TypeParametrizedTestWithNames&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_typed_test" prot="public" virt="non-virtual">TypedTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_typed_test" prot="public" virt="non-virtual">TypedTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_typed_test" prot="public" virt="non-virtual">TypedTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_typed_test" prot="public" virt="non-virtual">TypedTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_typed_test1" prot="public" virt="non-virtual">TypedTest1&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_typed_test2" prot="public" virt="non-virtual">TypedTest2&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_typed_test_p" prot="public" virt="non-virtual">TypedTestP&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_typed_test_p1" prot="public" virt="non-virtual">TypedTestP1&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_typed_test_p2" prot="public" virt="non-virtual">TypedTestP2&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_typed_test_suite_p_state_test" prot="public" virt="non-virtual">TypedTestSuitePStateTest</derivedcompoundref>
    <derivedcompoundref refid="class_typed_test_with_names" prot="public" virt="non-virtual">TypedTestWithNames&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_typed_test_with_names" prot="public" virt="non-virtual">TypedTestWithNames&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classbar_1_1_mixed_up_test_suite_test" prot="public" virt="non-virtual">bar::MixedUpTestSuiteTest</derivedcompoundref>
    <derivedcompoundref refid="classbar_1_1_mixed_up_test_suite_with_same_test_name_test" prot="public" virt="non-virtual">bar::MixedUpTestSuiteWithSameTestNameTest</derivedcompoundref>
    <derivedcompoundref refid="classfoo_1_1_mixed_up_test_suite_test" prot="public" virt="non-virtual">foo::MixedUpTestSuiteTest</derivedcompoundref>
    <derivedcompoundref refid="classfoo_1_1_mixed_up_test_suite_with_same_test_name_test" prot="public" virt="non-virtual">foo::MixedUpTestSuiteWithSameTestNameTest</derivedcompoundref>
    <derivedcompoundref refid="classlibrary1_1_1_numeric_test" prot="public" virt="non-virtual">library1::NumericTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classlibrary2_1_1_numeric_test" prot="public" virt="non-virtual">library2::NumericTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classlibrary2_1_1_trimmed_test" prot="public" virt="non-virtual">library2::TrimmedTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_code_location_for_t_e_s_t_f" prot="public" virt="non-virtual">testing::CodeLocationForTESTF</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t" prot="public" virt="non-virtual">testing::CodeLocationForTYPEDTEST&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t_p" prot="public" virt="non-virtual">testing::CodeLocationForTYPEDTESTP&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_current_test_info_test" prot="public" virt="non-virtual">testing::CurrentTestInfoTest</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_parse_flags_test" prot="public" virt="non-virtual">testing::ParseFlagsTest</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_set_up_test_case_test" prot="public" virt="non-virtual">testing::SetUpTestCaseTest</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_set_up_test_suite_test" prot="public" virt="non-virtual">testing::SetUpTestSuiteTest</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_test_info_test" prot="public" virt="non-virtual">testing::TestInfoTest</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1_test_with_param" prot="public" virt="non-virtual">testing::TestWithParam&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1gmock__function__mocker__test_1_1_expect_call_test" prot="public" virt="non-virtual">testing::gmock_function_mocker_test::ExpectCallTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1gmock__function__mocker__test_1_1_function_mocker_test" prot="public" virt="non-virtual">testing::gmock_function_mocker_test::FunctionMockerTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1gmock__function__mocker__test_1_1_mock_method_mock_function_signature_test" prot="public" virt="non-virtual">testing::gmock_function_mocker_test::MockMethodMockFunctionSignatureTest&lt; F &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1gmock__function__mocker__test_1_1_overloaded_mock_method_test" prot="public" virt="non-virtual">testing::gmock_function_mocker_test::OverloadedMockMethodTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1gmock__function__mocker__test_1_1_template_mock_test" prot="public" virt="non-virtual">testing::gmock_function_mocker_test::TemplateMockTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1internal_1_1_listener_test" prot="public" virt="non-virtual">testing::internal::ListenerTest</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1internal_1_1_test_suite_with_comment_test" prot="public" virt="non-virtual">testing::internal::TestSuiteWithCommentTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtesting_1_1internal_1_1_unit_test_record_property_test_helper" prot="public" virt="non-virtual">testing::internal::UnitTestRecordPropertyTestHelper</derivedcompoundref>
    <derivedcompoundref refid="classworks__here_1_1_not_instantiated_type_test" prot="public" virt="non-virtual">works_here::NotInstantiatedTypeTest&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classworks__here_1_1_not_used_type_test" prot="public" virt="non-virtual">works_here::NotUsedTypeTest&lt; T &gt;</derivedcompoundref>
    <innerclass refid="structtesting_1_1_test_1_1_setup__should__be__spelled___set_up" prot="private">testing::Test::Setup_should_be_spelled_SetUp</innerclass>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classtesting_1_1_test_1a4c49c2cdb6c328e6b709b4542f23de3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class TestInfo</definition>
        <argsstring></argsstring>
        <name>TestInfo</name>
        <qualifiedname>testing::Test::TestInfo</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="244" column="16" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="244" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtesting_1_1_test_1a7801584e65ac93e641916baa14f03943" prot="private" static="no" mutable="no">
        <type>const std::unique_ptr&lt; GTEST_FLAG_SAVER_ &gt;</type>
        <definition>const std::unique_ptr&lt;GTEST_FLAG_SAVER_&gt; testing::Test::gtest_flag_saver_</definition>
        <argsstring></argsstring>
        <name>gtest_flag_saver_</name>
        <qualifiedname>testing::Test::gtest_flag_saver_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="337" column="25" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="337" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classtesting_1_1_test_1a2b0a62f1e667bbe8d8cb18d785bfa991" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Test::~Test</definition>
        <argsstring>()</argsstring>
        <name>~Test</name>
        <qualifiedname>testing::Test::~Test</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="247" column="11"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtesting_1_1_test_1ae173b07a0fdd09fc1d417a2bb6cbdd76" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::Test::SetUpTestSuite</definition>
        <argsstring>()</argsstring>
        <name>SetUpTestSuite</name>
        <qualifiedname>testing::Test::SetUpTestSuite</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="255" column="15" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="255" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1a7704c8223ba28338a66ca2eaeba66383" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::Test::TearDownTestSuite</definition>
        <argsstring>()</argsstring>
        <name>TearDownTestSuite</name>
        <qualifiedname>testing::Test::TearDownTestSuite</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="263" column="15" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="263" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1af374706cbaf0ffc460f4fd04e7c150f1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::Test::TearDownTestCase</definition>
        <argsstring>()</argsstring>
        <name>TearDownTestCase</name>
        <qualifiedname>testing::Test::TearDownTestCase</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="268" column="15" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="268" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1a5ccbac42fee8c5b00b0bfe89b6c49d79" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::Test::SetUpTestCase</definition>
        <argsstring>()</argsstring>
        <name>SetUpTestCase</name>
        <qualifiedname>testing::Test::SetUpTestCase</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="269" column="15" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="269" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1a5e83604628ef542af888d631566ff60c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Test::HasFatalFailure</definition>
        <argsstring>()</argsstring>
        <name>HasFatalFailure</name>
        <qualifiedname>testing::Test::HasFatalFailure</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="273" column="15" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2741" bodyend="2743"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1a8c00e8cc6fe10616b480bd54d2a426cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Test::HasNonfatalFailure</definition>
        <argsstring>()</argsstring>
        <name>HasNonfatalFailure</name>
        <qualifiedname>testing::Test::HasNonfatalFailure</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="276" column="15" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2746" bodyend="2750"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1a7f0ada5dbc9e772acb2b6cd0b1b300d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Test::IsSkipped</definition>
        <argsstring>()</argsstring>
        <name>IsSkipped</name>
        <qualifiedname>testing::Test::IsSkipped</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="279" column="15" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2753" bodyend="2755"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1a7a00be7dd0a6bfdc8d47a1b784623613" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::Test::HasFailure</definition>
        <argsstring>()</argsstring>
        <name>HasFailure</name>
        <qualifiedname>testing::Test::HasFailure</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="283" column="15" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="283" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1a1559ce1c83f56993b582650c091535a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Test::RecordProperty</definition>
        <argsstring>(const std::string &amp;key, const std::string &amp;value)</argsstring>
        <name>RecordProperty</name>
        <qualifiedname>testing::Test::RecordProperty</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="298" column="15" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2520" bodyend="2522"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1a24fea27f32ac2d9b023cb8e58bb6590a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_convertible&lt; T, int64_t &gt;::value, bool &gt;</type>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void testing::Test::RecordProperty</definition>
        <argsstring>(const std::string &amp;key, const T &amp;value)</argsstring>
        <name>RecordProperty</name>
        <qualifiedname>testing::Test::RecordProperty</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="303" column="15" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="303" bodyend="305"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtesting_1_1_test_1a99f2bbfac6c95612322b0f10e607ebe5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Test::Test</definition>
        <argsstring>()</argsstring>
        <name>Test</name>
        <qualifiedname>testing::Test::Test</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="309" column="3" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2502" bodyend="2502"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1a190315150c303ddf801313fd1a777733" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Test::SetUp</definition>
        <argsstring>()</argsstring>
        <name>SetUp</name>
        <qualifiedname>testing::Test::SetUp</qualifiedname>
        <reimplementedby refid="class_common_test_1a4d98ceceb09fb614ff53e59e0695ea91">SetUp</reimplementedby>
        <reimplementedby refid="class_dynamic_fixture_1a1439886d8a6972815b60a216d731a115">SetUp</reimplementedby>
        <reimplementedby refid="class_fatal_failure_in_fixture_constructor_test_1af61931410069b47222d50b8ef90624f2">SetUp</reimplementedby>
        <reimplementedby refid="class_fatal_failure_in_set_up_test_1acaee8e6db4d744f0a98aa6f2e399df3a">SetUp</reimplementedby>
        <reimplementedby refid="class_fixture_1ad43066dc2f6aab4c4b4f0913e92f01f8">SetUp</reimplementedby>
        <reimplementedby refid="class_non_fatal_failure_in_fixture_constructor_test_1aeb0eb1eec27c6732712947713ce24a0e">SetUp</reimplementedby>
        <reimplementedby refid="class_non_fatal_failure_in_set_up_test_1ae8a49eec423dff7ef00e4d27cd9e39fa">SetUp</reimplementedby>
        <reimplementedby refid="class_predicate1_test_1a26ffe626e992d5983e6a48c965b0a0a9">SetUp</reimplementedby>
        <reimplementedby refid="class_predicate2_test_1a18b81bef55647028d072d59dea11055f">SetUp</reimplementedby>
        <reimplementedby refid="class_predicate3_test_1a4f70b241201bac1bfee5d159702188b4">SetUp</reimplementedby>
        <reimplementedby refid="class_predicate4_test_1ac27e833a2c7b3f889a01ad0a5bde18c6">SetUp</reimplementedby>
        <reimplementedby refid="class_predicate5_test_1a699fbdc25f5eeb2e810887a60a4b3c1b">SetUp</reimplementedby>
        <reimplementedby refid="class_property_one_1a0a31b0c199b14438b9cfbd27645aa542">SetUp</reimplementedby>
        <reimplementedby refid="class_property_two_1a88216ddb0ed17e58c9f974a743208fca">SetUp</reimplementedby>
        <reimplementedby refid="class_protected_fixture_methods_test_1a9d68d51c945c3f810cc2ab76e71ecb95">SetUp</reimplementedby>
        <reimplementedby refid="class_test_generation_test_1a06cbce86435733a568824f9641ea57c2">SetUp</reimplementedby>
        <reimplementedby refid="classtesting_1_1internal_1_1_listener_test_1a84f28c5bd517cdc07ec7b3d612fa6e30">SetUp</reimplementedby>
        <reimplementedby refid="classtesting_1_1_parse_flags_test_1a91b31cd2a108511459f49e31dcbeabe8">SetUp</reimplementedby>
        <reimplementedby refid="classtesting_1_1_set_up_test_case_test_1a5ceda206e569e436d71b2084333d23b1">SetUp</reimplementedby>
        <reimplementedby refid="classtesting_1_1_set_up_test_suite_test_1ac01379a3be015db77866fe224807b219">SetUp</reimplementedby>
        <reimplementedby refid="class_typed_test_suite_p_state_test_1a15417c392ef67e01accf9096734279e8">SetUp</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="312" column="16" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2512" bodyend="2512"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1a5f0ab439802cbe0ef7552f1a9f791923" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Test::TearDown</definition>
        <argsstring>()</argsstring>
        <name>TearDown</name>
        <qualifiedname>testing::Test::TearDown</qualifiedname>
        <reimplementedby refid="class_common_test_1a5e851b64ff1f73cb79b4dbd1d39fd075">TearDown</reimplementedby>
        <reimplementedby refid="class_dynamic_fixture_1a10e8ae5b963b80a99ad8892bc4974aac">TearDown</reimplementedby>
        <reimplementedby refid="class_fatal_failure_in_fixture_constructor_test_1a533465f7e241d56cb21ec11aa94f1908">TearDown</reimplementedby>
        <reimplementedby refid="class_fatal_failure_in_set_up_test_1af5aeffabb2d3d92169b26a14883b4c26">TearDown</reimplementedby>
        <reimplementedby refid="class_non_fatal_failure_in_fixture_constructor_test_1ad5d87bdc012dc66c008e7891008eb6a8">TearDown</reimplementedby>
        <reimplementedby refid="class_non_fatal_failure_in_set_up_test_1a564b41b4e07d4e9c6921d1f2e1be9352">TearDown</reimplementedby>
        <reimplementedby refid="class_predicate1_test_1aacedc6281afabd551ae2e67777016f3d">TearDown</reimplementedby>
        <reimplementedby refid="class_predicate2_test_1ad1092fca5badfb925a576949f63e872b">TearDown</reimplementedby>
        <reimplementedby refid="class_predicate3_test_1a502f4426fc9f90991a7aadbb304794e6">TearDown</reimplementedby>
        <reimplementedby refid="class_predicate4_test_1ad1af4f8c283659c3af2c52a62de3435d">TearDown</reimplementedby>
        <reimplementedby refid="class_predicate5_test_1aab641802c35a2a90f8db0b04dc0c6064">TearDown</reimplementedby>
        <reimplementedby refid="class_property_one_1a0a9a054682c28e32d6b3007e966a1aaf">TearDown</reimplementedby>
        <reimplementedby refid="class_property_two_1a8c2b36ef29249c5654f13bf8f504236a">TearDown</reimplementedby>
        <reimplementedby refid="class_protected_fixture_methods_test_1a826369510d499ffcab66649f7315e8cd">TearDown</reimplementedby>
        <reimplementedby refid="class_test_generation_test_1a7e6a732f786fe5b2d989c11c51eb9fe1">TearDown</reimplementedby>
        <reimplementedby refid="classtesting_1_1internal_1_1_listener_test_1a733f61300772e432a6a3ec7837c9f331">TearDown</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="315" column="16" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2517" bodyend="2517"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classtesting_1_1_test_1ab76536a462529a457429061e209a8ee7" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Test::HasSameFixtureClass</definition>
        <argsstring>()</argsstring>
        <name>HasSameFixtureClass</name>
        <qualifiedname>testing::Test::HasSameFixtureClass</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="320" column="15" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2545" bodyend="2604"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classtesting_1_1_test_1a146a4a5d9854e676d625a0ef67409794" prot="private" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void testing::Test::TestBody</definition>
        <argsstring>()=0</argsstring>
        <name>TestBody</name>
        <qualifiedname>testing::Test::TestBody</qualifiedname>
        <reimplementedby refid="class_dynamic_test_1afc4a0a94673a3d37709f9cd03e82b821">TestBody</reimplementedby>
        <reimplementedby refid="class_dynamic_test_1afc4a0a94673a3d37709f9cd03e82b821">TestBody</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="328" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1ab70d07cb03d17ccb1aedc2be66eaccff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Test::Run</definition>
        <argsstring>()</argsstring>
        <name>Run</name>
        <qualifiedname>testing::Test::Run</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="331" column="8" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2718" bodyend="2738"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1a3116f1f98ac889b11f1e3d981b8c6ca1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::Test::DeleteSelf_</definition>
        <argsstring>()</argsstring>
        <name>DeleteSelf_</name>
        <qualifiedname>testing::Test::DeleteSelf_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="335" column="8" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="335" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1af4a26e7206a5af7f73791ebe38d2bc9d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>Setup_should_be_spelled_SetUp *</type>
        <definition>virtual Setup_should_be_spelled_SetUp * testing::Test::Setup</definition>
        <argsstring>()</argsstring>
        <name>Setup</name>
        <qualifiedname>testing::Test::Setup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="356" column="41" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1af5a3dc42f3b8b38dc134cfcc0d2ebbc6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::Test::Test</definition>
        <argsstring>(const Test &amp;)=delete</argsstring>
        <name>Test</name>
        <qualifiedname>testing::Test::Test</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1_test" kindref="compound">Test</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="359" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_test_1a768031082faa54fc37f24c2b39887b48" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtesting_1_1_test" kindref="compound">Test</ref> &amp;</type>
        <definition>Test &amp; testing::Test::operator=</definition>
        <argsstring>(const Test &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>testing::Test::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1_test" kindref="compound">Test</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="360" column="8"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="88">
        <label>CommentTest&lt; Unstreamable &gt;</label>
        <link refid="class_comment_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>CommonTest&lt; T &gt;</label>
        <link refid="class_common_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>ContainerTest&lt; T &gt;</label>
        <link refid="class_container_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="89">
        <label>CustomFunctionNamingTest&lt; std::string &gt;</label>
        <link refid="class_custom_function_naming_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="90">
        <label>CustomFunctorNamingTest&lt; std::string &gt;</label>
        <link refid="class_custom_functor_naming_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="91">
        <label>CustomIntegerNamingTest&lt; int &gt;</label>
        <link refid="class_custom_integer_naming_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="92">
        <label>CustomLambdaNamingTest&lt; std::string &gt;</label>
        <link refid="class_custom_lambda_naming_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="93">
        <label>CustomStructNamingTest&lt; CustomStruct &gt;</label>
        <link refid="class_custom_struct_naming_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>DerivedTest&lt; T &gt;</label>
        <link refid="class_derived_test"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>DetectNotInstantiatedTest</label>
        <link refid="class_detect_not_instantiated_test"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>DetectNotInstantiatedTypesTest&lt; T &gt;</label>
        <link refid="class_detect_not_instantiated_types_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>DisabledTest</label>
        <link refid="class_disabled_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>DynamicFixture</label>
        <link refid="class_dynamic_fixture"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>DynamicTest&lt; Pass &gt;</label>
        <link refid="class_dynamic_test"/>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>DynamicUnitTestFixture</label>
        <link refid="class_dynamic_unit_test_fixture"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>EmptyBasenameParamInst</label>
        <link refid="class_empty_basename_param_inst"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>ExpectFailureTest</label>
        <link refid="class_expect_failure_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="94">
        <label>ExternalGeneratorTest&lt; int &gt;</label>
        <link refid="class_external_generator_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>ExternalInstantiationTest</label>
        <link refid="class_external_instantiation_test"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>FailedTest</label>
        <link refid="class_failed_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>FailingParamTest</label>
        <link refid="class_failing_param_test"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="35">
        <label>FatalFailureInFixtureConstructorTest</label>
        <link refid="class_fatal_failure_in_fixture_constructor_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>FatalFailureInSetUpTest</label>
        <link refid="class_fatal_failure_in_set_up_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>Fixture</label>
        <link refid="class_fixture"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>FooTest</label>
        <link refid="class_foo_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>FooTestFixture</label>
        <link refid="class_foo_test_fixture"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>GMockOutputTest</label>
        <link refid="class_g_mock_output_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="95">
        <label>GeneratorEvaluationTest&lt; int &gt;</label>
        <link refid="class_generator_evaluation_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>InstantiationInMultipleTranslationUnitsTest</label>
        <link refid="class_instantiation_in_multiple_translation_units_test"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="96">
        <label>MacroNamingTest&lt; int &gt;</label>
        <link refid="class_macro_naming_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>MacroNamingTestNonParametrized</label>
        <link refid="class_macro_naming_test_non_parametrized"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="97">
        <label>MultipleInstantiationTest&lt; int &gt;</label>
        <link refid="class_multiple_instantiation_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>MyEnumTest</label>
        <link refid="class_my_enum_test"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="98">
        <label>NamingTest&lt; int &gt;</label>
        <link refid="class_naming_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="41">
        <label>NonFatalFailureInFixtureConstructorTest</label>
        <link refid="class_non_fatal_failure_in_fixture_constructor_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>NonFatalFailureInSetUpTest</label>
        <link refid="class_non_fatal_failure_in_set_up_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="43">
        <label>NonParameterizedBaseTest</label>
        <link refid="class_non_parameterized_base_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>ParamTest</label>
        <link refid="class_param_test"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>ParameterizedDeathTest</label>
        <link refid="class_parameterized_death_test"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="44">
        <label>ParameterizedDerivedTest</label>
        <link refid="class_parameterized_derived_test"/>
        <childnode refid="43" relation="public-inheritance">
        </childnode>
      </node>
      <node id="45">
        <label>Predicate1Test</label>
        <link refid="class_predicate1_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="46">
        <label>Predicate2Test</label>
        <link refid="class_predicate2_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="47">
        <label>Predicate3Test</label>
        <link refid="class_predicate3_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="48">
        <label>Predicate4Test</label>
        <link refid="class_predicate4_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>Predicate5Test</label>
        <link refid="class_predicate5_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>PropertyOne</label>
        <link refid="class_property_one"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="51">
        <label>PropertyRecordingTest</label>
        <link refid="class_property_recording_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="52">
        <label>PropertyTwo</label>
        <link refid="class_property_two"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="53">
        <label>ProtectedFixtureMethodsTest</label>
        <link refid="class_protected_fixture_methods_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="99">
        <label>SeparateInstanceTest&lt; int &gt;</label>
        <link refid="class_separate_instance_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="54">
        <label>SetupFailTest</label>
        <link refid="class_setup_fail_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="55">
        <label>SkippedTest</label>
        <link refid="class_skipped_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>StatefulNamingTest</label>
        <link refid="class_stateful_naming_test"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="56">
        <label>SuccessfulTest</label>
        <link refid="class_successful_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="57">
        <label>TEST_F_before_TEST_in_same_test_case</label>
        <link refid="class_t_e_s_t___f__before___t_e_s_t__in__same__test__case"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="58">
        <label>TEST_before_TEST_F_in_same_test_case</label>
        <link refid="class_t_e_s_t__before___t_e_s_t___f__in__same__test__case"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="59">
        <label>TearDownFailTest</label>
        <link refid="class_tear_down_fail_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="100">
        <label>TestGenerationTest&lt; int &gt;</label>
        <link refid="class_test_generation_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="60">
        <label>TestSuiteThatFailsToSetUp</label>
        <link refid="class_test_suite_that_fails_to_set_up"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="61">
        <label>TestSuiteThatSkipsInSetUp</label>
        <link refid="class_test_suite_that_skips_in_set_up"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="62">
        <label>TypeParamTest&lt; T &gt;</label>
        <link refid="class_type_param_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="63">
        <label>TypeParameterizedTestSuite&lt; T &gt;</label>
        <link refid="class_type_parameterized_test_suite"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="64">
        <label>TypeParametrizedTestWithNames&lt; T &gt;</label>
        <link refid="class_type_parametrized_test_with_names"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>TypedTest&lt; T &gt;</label>
        <link refid="class_typed_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="65">
        <label>TypedTest1&lt; T &gt;</label>
        <link refid="class_typed_test1"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="66">
        <label>TypedTest2&lt; T &gt;</label>
        <link refid="class_typed_test2"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="67">
        <label>TypedTestP&lt; T &gt;</label>
        <link refid="class_typed_test_p"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="68">
        <label>TypedTestP1&lt; T &gt;</label>
        <link refid="class_typed_test_p1"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="69">
        <label>TypedTestP2&lt; T &gt;</label>
        <link refid="class_typed_test_p2"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="70">
        <label>TypedTestSuitePStateTest</label>
        <link refid="class_typed_test_suite_p_state_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="71">
        <label>TypedTestWithNames&lt; T &gt;</label>
        <link refid="class_typed_test_with_names"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>ValueParamTest</label>
        <link refid="class_value_param_test"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
      </node>
      <node id="101">
        <label>ValueParamTest&lt; int &gt;</label>
        <link refid="class_value_param_test"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="72">
        <label>bar::MixedUpTestSuiteTest</label>
        <link refid="classbar_1_1_mixed_up_test_suite_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="73">
        <label>bar::MixedUpTestSuiteWithSameTestNameTest</label>
        <link refid="classbar_1_1_mixed_up_test_suite_with_same_test_name_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="74">
        <label>foo::MixedUpTestSuiteTest</label>
        <link refid="classfoo_1_1_mixed_up_test_suite_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="75">
        <label>foo::MixedUpTestSuiteWithSameTestNameTest</label>
        <link refid="classfoo_1_1_mixed_up_test_suite_with_same_test_name_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="76">
        <label>library1::NumericTest&lt; T &gt;</label>
        <link refid="classlibrary1_1_1_numeric_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="77">
        <label>library2::NumericTest&lt; T &gt;</label>
        <link refid="classlibrary2_1_1_numeric_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="78">
        <label>library2::TrimmedTest&lt; T &gt;</label>
        <link refid="classlibrary2_1_1_trimmed_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="79">
        <label>testing::CodeLocationForTESTF</label>
        <link refid="classtesting_1_1_code_location_for_t_e_s_t_f"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>testing::CodeLocationForTESTP</label>
        <link refid="classtesting_1_1_code_location_for_t_e_s_t_p"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="80">
        <label>testing::CodeLocationForTYPEDTEST&lt; T &gt;</label>
        <link refid="classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="81">
        <label>testing::CodeLocationForTYPEDTESTP&lt; T &gt;</label>
        <link refid="classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t_p"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="82">
        <label>testing::CurrentTestInfoTest</label>
        <link refid="classtesting_1_1_current_test_info_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="83">
        <label>testing::ParseFlagsTest</label>
        <link refid="classtesting_1_1_parse_flags_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="84">
        <label>testing::SetUpTestCaseTest</label>
        <link refid="classtesting_1_1_set_up_test_case_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="85">
        <label>testing::SetUpTestSuiteTest</label>
        <link refid="classtesting_1_1_set_up_test_suite_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>testing::Test</label>
        <link refid="classtesting_1_1_test"/>
      </node>
      <node id="86">
        <label>testing::TestInfoTest</label>
        <link refid="classtesting_1_1_test_info_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="87">
        <label>testing::TestWithParam&lt; T &gt;</label>
        <link refid="classtesting_1_1_test_with_param"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>testing::TestWithParam&lt; CustomStruct &gt;</label>
        <link refid="classtesting_1_1_test_with_param"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>testing::TestWithParam&lt; MyEnums &gt;</label>
        <link refid="classtesting_1_1_test_with_param"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>testing::TestWithParam&lt; MyType &gt;</label>
        <link refid="classtesting_1_1_test_with_param"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>testing::TestWithParam&lt; Unstreamable &gt;</label>
        <link refid="classtesting_1_1_test_with_param"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>testing::TestWithParam&lt; bool &gt;</label>
        <link refid="classtesting_1_1_test_with_param"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>testing::TestWithParam&lt; int &gt;</label>
        <link refid="classtesting_1_1_test_with_param"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>testing::TestWithParam&lt; std::string &gt;</label>
        <link refid="classtesting_1_1_test_with_param"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="102">
        <label>testing::gmock_function_mocker_test::ExpectCallTest&lt; T &gt;</label>
        <link refid="classtesting_1_1gmock__function__mocker__test_1_1_expect_call_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="103">
        <label>testing::gmock_function_mocker_test::FunctionMockerTest&lt; T &gt;</label>
        <link refid="classtesting_1_1gmock__function__mocker__test_1_1_function_mocker_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="104">
        <label>testing::gmock_function_mocker_test::MockMethodMockFunctionSignatureTest&lt; F &gt;</label>
        <link refid="classtesting_1_1gmock__function__mocker__test_1_1_mock_method_mock_function_signature_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="105">
        <label>testing::gmock_function_mocker_test::OverloadedMockMethodTest&lt; T &gt;</label>
        <link refid="classtesting_1_1gmock__function__mocker__test_1_1_overloaded_mock_method_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="106">
        <label>testing::gmock_function_mocker_test::TemplateMockTest&lt; T &gt;</label>
        <link refid="classtesting_1_1gmock__function__mocker__test_1_1_template_mock_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>testing::gmock_matchers_test::GTestMatcherTestP</label>
        <link refid="classtesting_1_1gmock__matchers__test_1_1_g_test_matcher_test_p"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="107">
        <label>testing::internal::ListenerTest</label>
        <link refid="classtesting_1_1internal_1_1_listener_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="108">
        <label>testing::internal::TestSuiteWithCommentTest&lt; T &gt;</label>
        <link refid="classtesting_1_1internal_1_1_test_suite_with_comment_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="109">
        <label>testing::internal::UnitTestRecordPropertyTestHelper</label>
        <link refid="classtesting_1_1internal_1_1_unit_test_record_property_test_helper"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>works_here::NotInstantiatedTest</label>
        <link refid="classworks__here_1_1_not_instantiated_test"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="110">
        <label>works_here::NotInstantiatedTypeTest&lt; T &gt;</label>
        <link refid="classworks__here_1_1_not_instantiated_type_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>works_here::NotUsedTest</label>
        <link refid="classworks__here_1_1_not_used_test"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="111">
        <label>works_here::NotUsedTypeTest&lt; T &gt;</label>
        <link refid="classworks__here_1_1_not_used_type_test"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="242" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="242" bodyend="361"/>
    <listofallmembers>
      <member refid="classtesting_1_1_test_1a3116f1f98ac889b11f1e3d981b8c6ca1" prot="private" virt="non-virtual"><scope>testing::Test</scope><name>DeleteSelf_</name></member>
      <member refid="classtesting_1_1_test_1a7801584e65ac93e641916baa14f03943" prot="private" virt="non-virtual"><scope>testing::Test</scope><name>gtest_flag_saver_</name></member>
      <member refid="classtesting_1_1_test_1a7a00be7dd0a6bfdc8d47a1b784623613" prot="public" virt="non-virtual"><scope>testing::Test</scope><name>HasFailure</name></member>
      <member refid="classtesting_1_1_test_1a5e83604628ef542af888d631566ff60c" prot="public" virt="non-virtual"><scope>testing::Test</scope><name>HasFatalFailure</name></member>
      <member refid="classtesting_1_1_test_1a8c00e8cc6fe10616b480bd54d2a426cb" prot="public" virt="non-virtual"><scope>testing::Test</scope><name>HasNonfatalFailure</name></member>
      <member refid="classtesting_1_1_test_1ab76536a462529a457429061e209a8ee7" prot="private" virt="non-virtual"><scope>testing::Test</scope><name>HasSameFixtureClass</name></member>
      <member refid="classtesting_1_1_test_1a7f0ada5dbc9e772acb2b6cd0b1b300d7" prot="public" virt="non-virtual"><scope>testing::Test</scope><name>IsSkipped</name></member>
      <member refid="classtesting_1_1_test_1a768031082faa54fc37f24c2b39887b48" prot="private" virt="non-virtual"><scope>testing::Test</scope><name>operator=</name></member>
      <member refid="classtesting_1_1_test_1a1559ce1c83f56993b582650c091535a7" prot="public" virt="non-virtual"><scope>testing::Test</scope><name>RecordProperty</name></member>
      <member refid="classtesting_1_1_test_1a24fea27f32ac2d9b023cb8e58bb6590a" prot="public" virt="non-virtual"><scope>testing::Test</scope><name>RecordProperty</name></member>
      <member refid="classtesting_1_1_test_1ab70d07cb03d17ccb1aedc2be66eaccff" prot="private" virt="non-virtual"><scope>testing::Test</scope><name>Run</name></member>
      <member refid="classtesting_1_1_test_1a190315150c303ddf801313fd1a777733" prot="protected" virt="virtual"><scope>testing::Test</scope><name>SetUp</name></member>
      <member refid="classtesting_1_1_test_1af4a26e7206a5af7f73791ebe38d2bc9d" prot="private" virt="virtual"><scope>testing::Test</scope><name>Setup</name></member>
      <member refid="classtesting_1_1_test_1a5ccbac42fee8c5b00b0bfe89b6c49d79" prot="public" virt="non-virtual"><scope>testing::Test</scope><name>SetUpTestCase</name></member>
      <member refid="classtesting_1_1_test_1ae173b07a0fdd09fc1d417a2bb6cbdd76" prot="public" virt="non-virtual"><scope>testing::Test</scope><name>SetUpTestSuite</name></member>
      <member refid="classtesting_1_1_test_1a5f0ab439802cbe0ef7552f1a9f791923" prot="protected" virt="virtual"><scope>testing::Test</scope><name>TearDown</name></member>
      <member refid="classtesting_1_1_test_1af374706cbaf0ffc460f4fd04e7c150f1" prot="public" virt="non-virtual"><scope>testing::Test</scope><name>TearDownTestCase</name></member>
      <member refid="classtesting_1_1_test_1a7704c8223ba28338a66ca2eaeba66383" prot="public" virt="non-virtual"><scope>testing::Test</scope><name>TearDownTestSuite</name></member>
      <member refid="classtesting_1_1_test_1a99f2bbfac6c95612322b0f10e607ebe5" prot="protected" virt="non-virtual"><scope>testing::Test</scope><name>Test</name></member>
      <member refid="classtesting_1_1_test_1af5a3dc42f3b8b38dc134cfcc0d2ebbc6" prot="private" virt="non-virtual"><scope>testing::Test</scope><name>Test</name></member>
      <member refid="classtesting_1_1_test_1a146a4a5d9854e676d625a0ef67409794" prot="private" virt="pure-virtual"><scope>testing::Test</scope><name>TestBody</name></member>
      <member refid="classtesting_1_1_test_1a4c49c2cdb6c328e6b709b4542f23de3c" prot="public" virt="non-virtual"><scope>testing::Test</scope><name>TestInfo</name></member>
      <member refid="classtesting_1_1_test_1a2b0a62f1e667bbe8d8cb18d785bfa991" prot="public" virt="virtual"><scope>testing::Test</scope><name>~Test</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
