<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classtesting_1_1_default_value_3_01_t_01_6_01_4" kind="class" language="C++" prot="public">
    <compoundname>testing::DefaultValue&lt; T &amp; &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classtesting_1_1_default_value_3_01_t_01_6_01_4_1a320c8ae0a0e290d9058dfaca1d65f02f" prot="private" static="yes" mutable="no">
        <type>T *</type>
        <definition>T* testing::DefaultValue&lt; T &amp; &gt;::address_</definition>
        <argsstring></argsstring>
        <name>address_</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::address_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="682" column="12" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesting_1_1_default_value_1a8781b84d11b3612423be9100d76ab4ae" prot="private" static="yes" mutable="no">
        <type>ValueProducer *</type>
        <definition>ValueProducer* testing::DefaultValue&lt; T &gt;::producer_</definition>
        <argsstring></argsstring>
        <name>producer_</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::producer_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="648" column="24" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="648" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtesting_1_1_default_value_3_01_t_01_6_01_4_1a9863abf3d311ce5007d7e57dfce2f252" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::DefaultValue&lt; T &amp; &gt;::Set</definition>
        <argsstring>(T &amp;x)</argsstring>
        <name>Set</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::Set</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="657" column="15" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="657" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_default_value_3_01_t_01_6_01_4_1a3c8f9f81e591370f9b33798f58ca1a10" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::DefaultValue&lt; T &amp; &gt;::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::Clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="662" column="15" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="662" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_default_value_3_01_t_01_6_01_4_1a3e61547c2f0141cc8004385f3a9c817d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::DefaultValue&lt; T &amp; &gt;::IsSet</definition>
        <argsstring>()</argsstring>
        <name>IsSet</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::IsSet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="665" column="15" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="665" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_default_value_3_01_t_01_6_01_4_1a38420499e17d2fb4146ae6c4265f0d55" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::DefaultValue&lt; T &amp; &gt;::Exists</definition>
        <argsstring>()</argsstring>
        <name>Exists</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::Exists</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="669" column="15" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="669" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_default_value_3_01_t_01_6_01_4_1a2736bfb0ee3c987419c78eef54b76539" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>static T &amp; testing::DefaultValue&lt; T &amp; &gt;::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::Get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="676" column="12" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="676" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_default_value_1a5698814be364b9ac26e72ad37d6ff14e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::DefaultValue&lt; T &gt;::Set</definition>
        <argsstring>(T x)</argsstring>
        <name>Set</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::Set</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="581" column="15" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_default_value_1af012445ff5b194940c1427529707cb91" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::DefaultValue&lt; T &gt;::SetFactory</definition>
        <argsstring>(FactoryFunction factory)</argsstring>
        <name>SetFactory</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::SetFactory</qualifiedname>
        <param>
          <type>FactoryFunction</type>
          <declname>factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="590" column="15" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="590" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_default_value_1a8163037b60311177cb211f070c512ee3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::DefaultValue&lt; T &gt;::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::Clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="596" column="15" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="596" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_default_value_1ad49febe2c944cbbd06451ba7d0366ca1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::DefaultValue&lt; T &gt;::IsSet</definition>
        <argsstring>()</argsstring>
        <name>IsSet</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::IsSet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="602" column="15" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="602" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_default_value_1aec1ff9b510af7dbb86c837fd2409fd70" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::DefaultValue&lt; T &gt;::Exists</definition>
        <argsstring>()</argsstring>
        <name>Exists</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::Exists</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="606" column="15" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="606" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1_default_value_1a4dc6dfee4cbc9cdb36f5c9cde5cf2b83" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>static T testing::DefaultValue&lt; T &gt;::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::Get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="613" column="12" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="613" bodyend="616"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtesting_1_1_default_value_1a5763a68d75e0a4c97fcaff708e2df803" prot="public" static="no">
        <type>T(*</type>
        <definition>typedef T(* testing::DefaultValue&lt; T &gt;::FactoryFunction) ()</definition>
        <argsstring>)()</argsstring>
        <name>FactoryFunction</name>
        <qualifiedname>testing::DefaultValue&lt; T &amp; &gt;::FactoryFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="589" column="11" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="589" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="654" column="1" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="654" bodyend="683"/>
    <listofallmembers>
      <member refid="classtesting_1_1_default_value_3_01_t_01_6_01_4_1a320c8ae0a0e290d9058dfaca1d65f02f" prot="private" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>address_</name></member>
      <member refid="classtesting_1_1_default_value_3_01_t_01_6_01_4_1a3c8f9f81e591370f9b33798f58ca1a10" prot="public" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>Clear</name></member>
      <member refid="classtesting_1_1_default_value_1a8163037b60311177cb211f070c512ee3" prot="public" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>Clear</name></member>
      <member refid="classtesting_1_1_default_value_3_01_t_01_6_01_4_1a38420499e17d2fb4146ae6c4265f0d55" prot="public" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>Exists</name></member>
      <member refid="classtesting_1_1_default_value_1aec1ff9b510af7dbb86c837fd2409fd70" prot="public" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>Exists</name></member>
      <member refid="classtesting_1_1_default_value_1a5763a68d75e0a4c97fcaff708e2df803" prot="public" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>FactoryFunction</name></member>
      <member refid="classtesting_1_1_default_value_3_01_t_01_6_01_4_1a2736bfb0ee3c987419c78eef54b76539" prot="public" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>Get</name></member>
      <member refid="classtesting_1_1_default_value_1a4dc6dfee4cbc9cdb36f5c9cde5cf2b83" prot="public" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>Get</name></member>
      <member refid="classtesting_1_1_default_value_3_01_t_01_6_01_4_1a3e61547c2f0141cc8004385f3a9c817d" prot="public" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>IsSet</name></member>
      <member refid="classtesting_1_1_default_value_1ad49febe2c944cbbd06451ba7d0366ca1" prot="public" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>IsSet</name></member>
      <member refid="classtesting_1_1_default_value_1a8781b84d11b3612423be9100d76ab4ae" prot="private" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>producer_</name></member>
      <member refid="classtesting_1_1_default_value_3_01_t_01_6_01_4_1a9863abf3d311ce5007d7e57dfce2f252" prot="public" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>Set</name></member>
      <member refid="classtesting_1_1_default_value_1a5698814be364b9ac26e72ad37d6ff14e" prot="public" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>Set</name></member>
      <member refid="classtesting_1_1_default_value_1af012445ff5b194940c1427529707cb91" prot="public" virt="non-virtual"><scope>testing::DefaultValue&lt; T &amp; &gt;</scope><name>SetFactory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
