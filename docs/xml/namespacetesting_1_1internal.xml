<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespacetesting_1_1internal" kind="namespace" language="C++">
    <compoundname>testing::internal</compoundname>
    <innerclass refid="structtesting_1_1internal_1_1_action_impl" prot="public">testing::internal::ActionImpl</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_action_impl_3_01_r_07_args_8_8_8_08_00_01_impl_01_4" prot="public">testing::internal::ActionImpl&lt; R(Args...), Impl &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_assert_helper" prot="public">testing::internal::AssertHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_assign_action" prot="public">testing::internal::AssignAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_base" prot="public">testing::internal::Base</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_brief_unit_test_result_printer" prot="public">testing::internal::BriefUnitTestResultPrinter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_built_in_default_value" prot="public">testing::internal::BuiltInDefaultValue</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_built_in_default_value_3_01const_01_t_01_4" prot="public">testing::internal::BuiltInDefaultValue&lt; const T &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_built_in_default_value_3_01_t_01_5_01_4" prot="public">testing::internal::BuiltInDefaultValue&lt; T * &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_built_in_default_value_getter" prot="public">testing::internal::BuiltInDefaultValueGetter</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_built_in_default_value_getter_3_01_t_00_01false_01_4" prot="public">testing::internal::BuiltInDefaultValueGetter&lt; T, false &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_by_move_wrapper" prot="public">testing::internal::ByMoveWrapper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_cartesian_product_generator" prot="public">testing::internal::CartesianProductGenerator</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_cartesian_product_holder" prot="public">testing::internal::CartesianProductHolder</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_castable" prot="public">testing::internal::Castable</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_code_location" prot="public">testing::internal::CodeLocation</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1conjunction" prot="public">testing::internal::conjunction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1conjunction_3_01_p1_01_4" prot="public">testing::internal::conjunction&lt; P1 &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1conjunction_3_01_p1_00_01_ps_8_8_8_01_4" prot="public">testing::internal::conjunction&lt; P1, Ps... &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_const_and_non_const_castable" prot="public">testing::internal::ConstAndNonConstCastable</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_const_castable" prot="public">testing::internal::ConstCastable</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_const_char_ptr" prot="public">testing::internal::ConstCharPtr</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_const_ref" prot="public">testing::internal::ConstRef</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_const_ref_3_01_t_01_6_01_4" prot="public">testing::internal::ConstRef&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_container_printer" prot="public">testing::internal::ContainerPrinter</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_convertible_to_integer_printer" prot="public">testing::internal::ConvertibleToIntegerPrinter</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_convertible_to_string_view_printer" prot="public">testing::internal::ConvertibleToStringViewPrinter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_default_global_test_part_result_reporter" prot="public">testing::internal::DefaultGlobalTestPartResultReporter</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_default_name_generator" prot="public">testing::internal::DefaultNameGenerator</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter" prot="public">testing::internal::DefaultPerThreadTestPartResultReporter</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_delete_arg_action" prot="public">testing::internal::DeleteArgAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_derived" prot="public">testing::internal::Derived</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1disjunction" prot="public">testing::internal::disjunction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1disjunction_3_01_p1_01_4" prot="public">testing::internal::disjunction&lt; P1 &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1disjunction_3_01_p1_00_01_ps_8_8_8_01_4" prot="public">testing::internal::disjunction&lt; P1, Ps... &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_do_all_action" prot="public">testing::internal::DoAllAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_do_all_action_3_01_final_action_01_4" prot="public">testing::internal::DoAllAction&lt; FinalAction &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_do_all_action_3_01_initial_action_00_01_other_actions_8_8_8_01_4" prot="public">testing::internal::DoAllAction&lt; InitialAction, OtherActions... &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_do_default_action" prot="public">testing::internal::DoDefaultAction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_elem_from_list" prot="public">testing::internal::ElemFromList</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_elem_from_list_impl" prot="public">testing::internal::ElemFromListImpl</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_elem_from_list_impl_3_01std_1_1index__sequence_3_01_i_8_8_8_01_4_01_4" prot="public">testing::internal::ElemFromListImpl&lt; std::index_sequence&lt; I... &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_environment_invocation_catcher" prot="public">testing::internal::EnvironmentInvocationCatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_eq_helper" prot="public">testing::internal::EqHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_event_recording_listener" prot="public">testing::internal::EventRecordingListener</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_event_recording_listener2" prot="public">testing::internal::EventRecordingListener2</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_excessive_arg" prot="public">testing::internal::ExcessiveArg</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_failure_reporter_interface" prot="public">testing::internal::FailureReporterInterface</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1faketype" prot="public">testing::internal::faketype</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_fallback_printer" prot="public">testing::internal::FallbackPrinter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_final_success_checker" prot="public">testing::internal::FinalSuccessChecker</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_find_first_printer" prot="public">testing::internal::FindFirstPrinter</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_find_first_printer_3_01_t_00_01decltype_07_printer_1_1_print_value8934dd9c57bcc59428a3d87a80ca030e" prot="public">testing::internal::FindFirstPrinter&lt; T, decltype(Printer::PrintValue(std::declval&lt; const T &amp; &gt;(), nullptr)), Printer, Printers... &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_flat_tuple" prot="public">testing::internal::FlatTuple</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_flat_tuple_base" prot="public">testing::internal::FlatTupleBase</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_flat_tuple_base_3_01_flat_tuple_3_01_t_8_8_8_01_4_00_01std_1_1indee8895a1424e1a9a389f580bebe9c3355" prot="public">testing::internal::FlatTupleBase&lt; FlatTuple&lt; T... &gt;, std::index_sequence&lt; Idx... &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_flat_tuple_construct_tag" prot="public">testing::internal::FlatTupleConstructTag</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_flat_tuple_elem_base" prot="public">testing::internal::FlatTupleElemBase</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_flat_tuple_elem_base_3_01_flat_tuple_3_01_t_8_8_8_01_4_00_01_i_01_4" prot="public">testing::internal::FlatTupleElemBase&lt; FlatTuple&lt; T... &gt;, I &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_floating_point" prot="public">testing::internal::FloatingPoint</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_format_for_comparison" prot="public">testing::internal::FormatForComparison</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_format_for_comparison_3_01_to_print_0f_n_0e_00_01_other_operand_01_4" prot="public">testing::internal::FormatForComparison&lt; ToPrint[N], OtherOperand &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function" prot="public">testing::internal::Function</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function_3_01_r_07_args_8_8_8_08_4" prot="public">testing::internal::Function&lt; R(Args...)&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function_pointer_printer" prot="public">testing::internal::FunctionPointerPrinter</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_generate_type_list" prot="public">testing::internal::GenerateTypeList</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_google_test_failure_reporter" prot="public">testing::internal::GoogleTestFailureReporter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_g_test_flag_saver" prot="public">testing::internal::GTestFlagSaver</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_g_test_log" prot="public">testing::internal::GTestLog</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_g_test_mutex_lock" prot="public">testing::internal::GTestMutexLock</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_g_test_non_copyable" prot="public">testing::internal::GTestNonCopyable</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_has_debug_string_and_short_debug_string" prot="public">testing::internal::HasDebugStringAndShortDebugString</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_ignore" prot="public">testing::internal::Ignore</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_ignored_value" prot="public">testing::internal::IgnoredValue</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_ignore_result_action" prot="public">testing::internal::IgnoreResultAction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_impl_base" prot="public">testing::internal::ImplBase</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_invoke_argument_action" prot="public">testing::internal::InvokeArgumentAction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_invoke_method_action" prot="public">testing::internal::InvokeMethodAction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_invoke_method_without_args_action" prot="public">testing::internal::InvokeMethodWithoutArgsAction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_invoke_without_args_action" prot="public">testing::internal::InvokeWithoutArgsAction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1is__callable__r__impl" prot="public">testing::internal::is_callable_r_impl</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1is__callable__r__impl_3_01void__t_3_01call__result__t_3_01_f_00_01_15f04c251b05f7c651a5667e6d0fcb39" prot="public">testing::internal::is_callable_r_impl&lt; void_t&lt; call_result_t&lt; F, Args... &gt; &gt;, R, F, Args... &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1is__implicitly__convertible" prot="public">testing::internal::is_implicitly_convertible</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1is__proxy__type__list" prot="public">testing::internal::is_proxy_type_list</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1is__proxy__type__list_3_01_proxy_type_list_3_01_ts_8_8_8_01_4_01_4" prot="public">testing::internal::is_proxy_type_list&lt; ProxyTypeList&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_is_empty_matcher" prot="public">testing::internal::IsEmptyMatcher</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_is_hash_table" prot="public">testing::internal::IsHashTable</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_is_recursive_container" prot="public">testing::internal::IsRecursiveContainer</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_is_recursive_container_impl" prot="public">testing::internal::IsRecursiveContainerImpl</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_is_recursive_container_impl_3_01_c_00_01false_01_4" prot="public">testing::internal::IsRecursiveContainerImpl&lt; C, false &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_is_recursive_container_impl_3_01_c_00_01true_01_4" prot="public">testing::internal::IsRecursiveContainerImpl&lt; C, true &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_is_std_span" prot="public">testing::internal::IsStdSpan</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_kind_of" prot="public">testing::internal::KindOf</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_less_by_name" prot="public">testing::internal::LessByName</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_listener_test" prot="public">testing::internal::ListenerTest</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_mark_as_ignored" prot="public">testing::internal::MarkAsIgnored</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_max_bipartite_match_state" prot="public">testing::internal::MaxBipartiteMatchState</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_mutex" prot="public">testing::internal::Mutex</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_naggy_mock_impl" prot="public">testing::internal::NaggyMockImpl</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_name_generator_selector" prot="public">testing::internal::NameGeneratorSelector</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_native_array" prot="public">testing::internal::NativeArray</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1negation" prot="public">testing::internal::negation</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_nice_mock_impl" prot="public">testing::internal::NiceMockImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_no_default_constructor" prot="public">testing::internal::NoDefaultConstructor</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_none" prot="public">testing::internal::None</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_os_stack_trace_getter" prot="public">testing::internal::OsStackTraceGetter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_os_stack_trace_getter_interface" prot="public">testing::internal::OsStackTraceGetterInterface</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_param_converter_generator" prot="public">testing::internal::ParamConverterGenerator</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_parameterized_test_factory" prot="public">testing::internal::ParameterizedTestFactory</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_parameterized_test_suite_info" prot="public">testing::internal::ParameterizedTestSuiteInfo</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_parameterized_test_suite_info_base" prot="public">testing::internal::ParameterizedTestSuiteInfoBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_parameterized_test_suite_registry" prot="public">testing::internal::ParameterizedTestSuiteRegistry</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_param_generator" prot="public">testing::internal::ParamGenerator</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_param_generator_converter" prot="public">testing::internal::ParamGeneratorConverter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_param_generator_interface" prot="public">testing::internal::ParamGeneratorInterface</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_param_iterator" prot="public">testing::internal::ParamIterator</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_param_iterator_interface" prot="public">testing::internal::ParamIteratorInterface</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_pointer_printer" prot="public">testing::internal::PointerPrinter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_pretty_unit_test_result_printer" prot="public">testing::internal::PrettyUnitTestResultPrinter</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_protobuf_printer" prot="public">testing::internal::ProtobufPrinter</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_proxy_type_list" prot="public">testing::internal::ProxyTypeList</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_random" prot="public">testing::internal::Random</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_range_generator" prot="public">testing::internal::RangeGenerator</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_raw_bytes_printer" prot="public">testing::internal::RawBytesPrinter</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_relation_to_source_copy" prot="public">testing::internal::RelationToSourceCopy</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_relation_to_source_reference" prot="public">testing::internal::RelationToSourceReference</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_remove_const_from_key" prot="public">testing::internal::RemoveConstFromKey</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_remove_const_from_key_3_01std_1_1pair_3_01const_01_k_00_01_v_01_4_01_4" prot="public">testing::internal::RemoveConstFromKey&lt; std::pair&lt; const K, V &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_action" prot="public">testing::internal::ReturnAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_action_3_01_by_move_wrapper_3_01_t_01_4_01_4" prot="public">testing::internal::ReturnAction&lt; ByMoveWrapper&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_return_arg_action" prot="public">testing::internal::ReturnArgAction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_return_new_action" prot="public">testing::internal::ReturnNewAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_null_action" prot="public">testing::internal::ReturnNullAction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_return_pointee_action" prot="public">testing::internal::ReturnPointeeAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_ref_action" prot="public">testing::internal::ReturnRefAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_ref_of_copy_action" prot="public">testing::internal::ReturnRefOfCopyAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_round_robin_action" prot="public">testing::internal::ReturnRoundRobinAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_void_action" prot="public">testing::internal::ReturnVoidAction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_save_arg_action" prot="public">testing::internal::SaveArgAction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_save_arg_pointee_action" prot="public">testing::internal::SaveArgPointeeAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_secret" prot="public">testing::internal::Secret</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_set_arg_referee_action" prot="public">testing::internal::SetArgRefereeAction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_set_argument_pointee_action" prot="public">testing::internal::SetArgumentPointeeAction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_set_array_argument_action" prot="public">testing::internal::SetArrayArgumentAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_set_errno_and_return_action" prot="public">testing::internal::SetErrnoAndReturnAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_stl_container_view" prot="public">testing::internal::StlContainerView</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_stl_container_view_3_01_1_1std_1_1tuple_3_01_element_pointer_00_01_size_01_4_01_4" prot="public">testing::internal::StlContainerView&lt; ::std::tuple&lt; ElementPointer, Size &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_stl_container_view_3_01_element_0f_n_0e_4" prot="public">testing::internal::StlContainerView&lt; Element[N]&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_strict_mock_impl" prot="public">testing::internal::StrictMockImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_string" prot="public">testing::internal::String</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_suite_api_resolver" prot="public">testing::internal::SuiteApiResolver</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_templates" prot="public">testing::internal::Templates</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_templates_3_01_head___01_4" prot="public">testing::internal::Templates&lt; Head_ &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_template_sel" prot="public">testing::internal::TemplateSel</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_event_listeners_accessor" prot="public">testing::internal::TestEventListenersAccessor</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_event_repeater" prot="public">testing::internal::TestEventRepeater</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_factory_base" prot="public">testing::internal::TestFactoryBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_factory_impl" prot="public">testing::internal::TestFactoryImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_meta_factory" prot="public">testing::internal::TestMetaFactory</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_meta_factory_base" prot="public">testing::internal::TestMetaFactoryBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_property_key_is" prot="public">testing::internal::TestPropertyKeyIs</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_result_accessor" prot="public">testing::internal::TestResultAccessor</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_suite_with_comment_test" prot="public">testing::internal::TestSuiteWithCommentTest</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_this_ref_adjuster" prot="public">testing::internal::ThisRefAdjuster</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_thread_local" prot="public">testing::internal::ThreadLocal</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_timer" prot="public">testing::internal::Timer</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_to" prot="public">testing::internal::To</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_trace_info" prot="public">testing::internal::TraceInfo</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_true_with_string" prot="public">testing::internal::TrueWithString</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_type_id_helper" prot="public">testing::internal::TypeIdHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_type_parameterized_test" prot="public">testing::internal::TypeParameterizedTest</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_type_parameterized_test_3_01_fixture_00_01_test_sel_00_01internal_1_1_none_01_4" prot="public">testing::internal::TypeParameterizedTest&lt; Fixture, TestSel, internal::None &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_type_parameterized_test_suite" prot="public">testing::internal::TypeParameterizedTestSuite</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_type_parameterized_test_suite_3_01_fixture_00_01internal_1_1_none_00_01_types_01_4" prot="public">testing::internal::TypeParameterizedTestSuite&lt; Fixture, internal::None, Types &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_type_parameterized_test_suite_registry" prot="public">testing::internal::TypeParameterizedTestSuiteRegistry</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_types" prot="public">testing::internal::Types</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_types_3_01_head___01_4" prot="public">testing::internal::Types&lt; Head_ &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_type_with_size" prot="public">testing::internal::TypeWithSize</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_type_with_size_3_014_01_4" prot="public">testing::internal::TypeWithSize&lt; 4 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_type_with_size_3_018_01_4" prot="public">testing::internal::TypeWithSize&lt; 8 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unit_test_helper" prot="public">testing::internal::UnitTestHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unit_test_impl" prot="public">testing::internal::UnitTestImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unit_test_options" prot="public">testing::internal::UnitTestOptions</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unit_test_record_property_test_helper" prot="public">testing::internal::UnitTestRecordPropertyTestHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_printer" prot="public">testing::internal::UniversalPrinter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_printer_3_01const_01_t_01_4" prot="public">testing::internal::UniversalPrinter&lt; const T &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_printer_3_01_t_01_6_01_4" prot="public">testing::internal::UniversalPrinter&lt; T &amp; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_printer_3_01_t_0f_n_0e_4" prot="public">testing::internal::UniversalPrinter&lt; T[N]&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_printer_3_01_wrapper_3_01_t_01_4_01_4" prot="public">testing::internal::UniversalPrinter&lt; Wrapper&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer" prot="public">testing::internal::UniversalTersePrinter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01char_01_5_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; char * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01char16__t_01_5_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; char16_t * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01char32__t_01_5_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; char32_t * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01const_01char_01_5_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; const char * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01const_01char16__t_01_5_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; const char16_t * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01const_01char32__t_01_5_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; const char32_t * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01std_1_1reference__wrapper_3_01_t_01_4_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; std::reference_wrapper&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01_t_01_6_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; T &amp; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01_t_0f_n_0e_4" prot="public">testing::internal::UniversalTersePrinter&lt; T[N]&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01wchar__t_01_5_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; wchar_t * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_value_array" prot="public">testing::internal::ValueArray</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_values_in_iterator_range_generator" prot="public">testing::internal::ValuesInIteratorRangeGenerator</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_with_args_action" prot="public">testing::internal::WithArgsAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_without_matchers" prot="public">testing::internal::WithoutMatchers</innerclass>
    <innernamespace refid="namespacetesting_1_1internal_1_1edit__distance">testing::internal::edit_distance</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal_1_1gmockpp">testing::internal::gmockpp</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal_1_1internal__stream__operator__without__lexical__name__lookup">testing::internal::internal_stream_operator_without_lexical_name_lookup</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal_1_1posix">testing::internal::posix</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="gmock-internal-utils_8h_1aa8747bda20137c9aa7f846dee830e686" prot="public" static="no" strong="no">
        <type></type>
        <name>TypeKind</name>
        <qualifiedname>testing::internal::TypeKind</qualifiedname>
        <enumvalue id="gmock-internal-utils_8h_1aa8747bda20137c9aa7f846dee830e686a3af2191917fb1796599139b3615302fe" prot="public">
          <name>kBool</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gmock-internal-utils_8h_1aa8747bda20137c9aa7f846dee830e686a8a52f0fd73e05da35c45d80653633cab" prot="public">
          <name>kInteger</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gmock-internal-utils_8h_1aa8747bda20137c9aa7f846dee830e686acdce59b8c136926ace18aa9c2995878d" prot="public">
          <name>kFloatingPoint</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gmock-internal-utils_8h_1aa8747bda20137c9aa7f846dee830e686ad47f29150ab7a9ec8ce2491f44537347" prot="public">
          <name>kOther</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="128" column="1" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="enum" id="gmock-internal-utils_8h_1a203d1a8a2147a53d12bbdae40d443914" prot="public" static="no" strong="no">
        <type></type>
        <name>LogSeverity</name>
        <qualifiedname>testing::internal::LogSeverity</qualifiedname>
        <enumvalue id="gmock-internal-utils_8h_1a203d1a8a2147a53d12bbdae40d443914a396aacfaee2849eaab7c1de9773d624d" prot="public">
          <name>kInfo</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gmock-internal-utils_8h_1a203d1a8a2147a53d12bbdae40d443914a5beeeab1b0a3caabd0afb43356c1a271" prot="public">
          <name>kWarning</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="268" column="1" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="268" bodyend="268"/>
      </memberdef>
      <memberdef kind="enum" id="gtest-port_8h_1aa6255ef3b023c5b4e1a2198d887fb977" prot="public" static="no" strong="no">
        <type></type>
        <name>GTestLogSeverity</name>
        <qualifiedname>testing::internal::GTestLogSeverity</qualifiedname>
        <enumvalue id="gtest-port_8h_1aa6255ef3b023c5b4e1a2198d887fb977aff315e0913fcda86fe4de882bf5e33e9" prot="public">
          <name>GTEST_INFO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gtest-port_8h_1aa6255ef3b023c5b4e1a2198d887fb977a7a051bc2794f15a4bf0eab40562a304c" prot="public">
          <name>GTEST_WARNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gtest-port_8h_1aa6255ef3b023c5b4e1a2198d887fb977a651e9cd2a904e0c8210536271b875f75" prot="public">
          <name>GTEST_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gtest-port_8h_1aa6255ef3b023c5b4e1a2198d887fb977a75063567740f6bf7da419b1b9197b12e" prot="public">
          <name>GTEST_FATAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1070" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1070" bodyend="1070"/>
      </memberdef>
      <memberdef kind="enum" id="gtest-printers_8cc_1ae2ef98247c76a50cdc80ceb4a6c81793" prot="public" static="no" strong="no">
        <type></type>
        <name>CharFormat</name>
        <qualifiedname>testing::internal::CharFormat</qualifiedname>
        <enumvalue id="gtest-printers_8cc_1ae2ef98247c76a50cdc80ceb4a6c81793af7038866be92e9978360b831e376ffaa" prot="public">
          <name>kAsIs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gtest-printers_8cc_1ae2ef98247c76a50cdc80ceb4a6c81793aebfa5293302338a8e8678744c103f113" prot="public">
          <name>kHexEscape</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gtest-printers_8cc_1ae2ef98247c76a50cdc80ceb4a6c81793ae1211108e9f35f891d9951da64794d03" prot="public">
          <name>kSpecialEscape</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="140" column="1" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="140" bodyend="140"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="gmock-actions_8h_1acd2612094f9562fbec7623627cc340f2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>using testing::internal::void_t =  void</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <qualifiedname>testing::internal::void_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="303" column="1" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gmock-actions_8h_1a1df86d7075d2b6456e37074cb8951625" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; F &gt;()(std::declval&lt; Args &gt;()...))</type>
        <definition>using testing::internal::call_result_t =  decltype(std::declval&lt;F&gt;()(std::declval&lt;Args&gt;()...))</definition>
        <argsstring></argsstring>
        <name>call_result_t</name>
        <qualifiedname>testing::internal::call_result_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="356" column="1" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gmock-actions_8h_1ac41d4253d6baede780b018f4a8de4526" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1is__callable__r__impl" kindref="compound">is_callable_r_impl</ref>&lt; void, R, F, Args... &gt;</type>
        <definition>using testing::internal::is_callable_r =  is_callable_r_impl&lt;void, R, F, Args...&gt;</definition>
        <argsstring></argsstring>
        <name>is_callable_r</name>
        <qualifiedname>testing::internal::is_callable_r</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="374" column="1" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gmock-function-mocker_8h_1a95ca36731b8f0861e3bb23fb194ac4d5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>using testing::internal::identity_t =  T</definition>
        <argsstring></argsstring>
        <name>identity_t</name>
        <qualifiedname>testing::internal::identity_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h" line="51" column="1" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gmock-internal-utils_8h_1a99678414ccfcb9e75e3bb799fb069566" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>TypeKind</type>
            <declname>kFromKind</declname>
            <defname>kFromKind</defname>
          </param>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>TypeKind</type>
            <declname>kToKind</declname>
            <defname>kToKind</defname>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool,(kFromKind==kBool) ? true :(kFromKind !=kToKind) ? false :(kFromKind==kInteger &amp;&amp;(((sizeof(From)&lt; sizeof(<ref refid="classtesting_1_1internal_1_1_to" kindref="compound">To</ref>)) &amp;&amp; !(std::is_signed&lt; From &gt;::value &amp;&amp;!std::is_signed&lt; <ref refid="classtesting_1_1internal_1_1_to" kindref="compound">To</ref> &gt;::value))||((sizeof(From)==sizeof(<ref refid="classtesting_1_1internal_1_1_to" kindref="compound">To</ref>)) &amp;&amp;(std::is_signed&lt; From &gt;::value==std::is_signed&lt; <ref refid="classtesting_1_1internal_1_1_to" kindref="compound">To</ref> &gt;::value)))) ? true :(kFromKind==kFloatingPoint &amp;&amp;(sizeof(From)&lt;=sizeof(<ref refid="classtesting_1_1internal_1_1_to" kindref="compound">To</ref>))) ? true :false &gt;</type>
        <definition>using testing::internal::LosslessArithmeticConvertibleImpl =  std::integral_constant&lt;
    bool,
    
      
      (kFromKind == kBool) ? true
      
      
    : (kFromKind != kToKind) ? false
    : (kFromKind == kInteger &amp;&amp;
       
       
      (((sizeof(From) &lt; sizeof(To)) &amp;&amp;
        !(std::is_signed&lt;From&gt;::value &amp;&amp; !std::is_signed&lt;To&gt;::value)) ||
       
       
       ((sizeof(From) == sizeof(To)) &amp;&amp;
        (std::is_signed&lt;From&gt;::value == std::is_signed&lt;To&gt;::value)))
       ) ? true
      
      
    : (kFromKind == kFloatingPoint &amp;&amp; (sizeof(From) &lt;= sizeof(To))) ? true
    : false
    
    &gt;</definition>
        <argsstring></argsstring>
        <name>LosslessArithmeticConvertibleImpl</name>
        <qualifiedname>testing::internal::LosslessArithmeticConvertibleImpl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="184" column="1" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gmock-internal-utils_8h_1ae9b985c49b72c1dae05908bc706464dc" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>LosslessArithmeticConvertibleImpl&lt; GMOCK_KIND_OF_(From), From, GMOCK_KIND_OF_(<ref refid="classtesting_1_1internal_1_1_to" kindref="compound">To</ref>), <ref refid="classtesting_1_1internal_1_1_to" kindref="compound">To</ref> &gt;</type>
        <definition>using testing::internal::LosslessArithmeticConvertible = 
    LosslessArithmeticConvertibleImpl&lt;GMOCK_KIND_OF_(From), From,
                                      GMOCK_KIND_OF_(To), To&gt;</definition>
        <argsstring></argsstring>
        <name>LosslessArithmeticConvertible</name>
        <qualifiedname>testing::internal::LosslessArithmeticConvertible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="217" column="1" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gmock-internal-utils_8h_1af9d8d15f4b9a816816f247531b2956f7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::tuple_element&lt; I, T &gt;::type</type>
        <definition>using testing::internal::TupleElement =  typename std::tuple_element&lt;I, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>TupleElement</name>
        <qualifiedname>testing::internal::TupleElement</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="480" column="1" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-printers_8h_1a0bc587b0c4e6a800cdff5c014b0fe90a" prot="public" static="no">
        <type>::std::vector&lt;::std::string &gt;</type>
        <definition>typedef ::std::vector&lt;::std::string&gt; testing::internal::Strings</definition>
        <argsstring></argsstring>
        <name>Strings</name>
        <qualifiedname>testing::internal::Strings</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="1190" column="23" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="1190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1a02e1981f5ff70609e6ac06e006ff519a" prot="public" static="no">
        <type><ref refid="classtesting_1_1internal_1_1_floating_point" kindref="compound">FloatingPoint</ref>&lt; float &gt;</type>
        <definition>typedef FloatingPoint&lt;float&gt; testing::internal::Float</definition>
        <argsstring></argsstring>
        <name>Float</name>
        <qualifiedname>testing::internal::Float</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="391" column="23" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1a66a7579b1893b260c31dad577f7a5c48" prot="public" static="no">
        <type><ref refid="classtesting_1_1internal_1_1_floating_point" kindref="compound">FloatingPoint</ref>&lt; double &gt;</type>
        <definition>typedef FloatingPoint&lt;double&gt; testing::internal::Double</definition>
        <argsstring></argsstring>
        <name>Double</name>
        <qualifiedname>testing::internal::Double</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="392" column="23" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1ab1114197d3c657d8b7f8e0c5caa12d00" prot="public" static="no">
        <type>const void *</type>
        <definition>typedef const void* testing::internal::TypeId</definition>
        <argsstring></argsstring>
        <name>TypeId</name>
        <qualifiedname>testing::internal::TypeId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="400" column="20" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1ac4686a1790fd4cb5ebb59a0e5cf134a6" prot="public" static="no">
        <type>void(*)()</type>
        <definition>using testing::internal::SetUpTestSuiteFunc =  void (*)()</definition>
        <argsstring></argsstring>
        <name>SetUpTestSuiteFunc</name>
        <qualifiedname>testing::internal::SetUpTestSuiteFunc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="473" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1ae8d5df1ea4013a3e76d0e66cb9c3bc8c" prot="public" static="no">
        <type>void(*)()</type>
        <definition>using testing::internal::TearDownTestSuiteFunc =  void (*)()</definition>
        <argsstring></argsstring>
        <name>TearDownTestSuiteFunc</name>
        <qualifiedname>testing::internal::TearDownTestSuiteFunc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="474" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1a66025de0f4f2e5ef1b511aa014144ba2" prot="public" static="no">
        <type>void(*)()</type>
        <definition>using testing::internal::SetUpTearDownSuiteFuncType =  void (*)()</definition>
        <argsstring></argsstring>
        <name>SetUpTearDownSuiteFuncType</name>
        <qualifiedname>testing::internal::SetUpTearDownSuiteFuncType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="488" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1a62f37fe87608cc9c37ba19eb307a43ed" prot="public" static="no">
        <type>TypedTestSuitePState</type>
        <definition>using testing::internal::TypedTestCasePState =  TypedTestSuitePState</definition>
        <argsstring></argsstring>
        <name>TypedTestCasePState</name>
        <qualifiedname>testing::internal::TypedTestCasePState</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="628" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1ad8f0c2883245f1df2a53618a49f0deb3" prot="public" static="no">
        <type>int</type>
        <definition>typedef int testing::internal::IsContainer</definition>
        <argsstring></argsstring>
        <name>IsContainer</name>
        <qualifiedname>testing::internal::IsContainer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="926" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="926" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1abf080521ce135deb510e0a7830fd3d33" prot="public" static="no">
        <type>char</type>
        <definition>typedef char testing::internal::IsNotContainer</definition>
        <argsstring></argsstring>
        <name>IsNotContainer</name>
        <qualifiedname>testing::internal::IsNotContainer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="937" column="14" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="937" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-param-util_8h_1a2276f3b29effdff57c2801542d34a568" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class TestCase</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_parameterized_test_suite_info" kindref="compound">ParameterizedTestSuiteInfo</ref>&lt; <ref refid="classtesting_1_1_test_suite" kindref="compound">TestCase</ref> &gt;</type>
        <definition>using testing::internal::ParameterizedTestCaseInfo =  ParameterizedTestSuiteInfo&lt;TestCase&gt;</definition>
        <argsstring></argsstring>
        <name>ParameterizedTestCaseInfo</name>
        <qualifiedname>testing::internal::ParameterizedTestCaseInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-param-util.h" line="682" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-param-util.h" bodystart="682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1a08b187c6cc4e28400aadf9a32fccc8de" prot="public" static="no">
        <type><ref refid="classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">GTestMutexLock</ref></type>
        <definition>typedef GTestMutexLock testing::internal::MutexLock</definition>
        <argsstring></argsstring>
        <name>MutexLock</name>
        <qualifiedname>testing::internal::MutexLock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1932" column="24" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1932" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1a10f72a25fc44737bdc261f9ebb051ec3" prot="public" static="no">
        <type>long long</type>
        <definition>using testing::internal::BiggestInt =  long long</definition>
        <argsstring></argsstring>
        <name>BiggestInt</name>
        <qualifiedname>testing::internal::BiggestInt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2219" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1a7ce008e15981976a761d359578f2dc19" prot="public" static="no">
        <type>int64_t</type>
        <definition>using testing::internal::TimeInMillis =  int64_t</definition>
        <argsstring></argsstring>
        <name>TimeInMillis</name>
        <qualifiedname>testing::internal::TimeInMillis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2267" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2267" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="gmock-internal-utils_8h_1a96274a788ffc75a6dffdfa8aa1f34fb9" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kInfoVerbosity[]</definition>
        <argsstring>[]</argsstring>
        <name>kInfoVerbosity</name>
        <qualifiedname>testing::internal::kInfoVerbosity</qualifiedname>
        <initializer>= &quot;info&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="273" column="12" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-internal-utils_8h_1ad9386ccda6b6deac2f7b84784d3088c0" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kWarningVerbosity[]</definition>
        <argsstring>[]</argsstring>
        <name>kWarningVerbosity</name>
        <qualifiedname>testing::internal::kWarningVerbosity</qualifiedname>
        <initializer>= &quot;warning&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="275" column="12" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-internal-utils_8h_1a3d730761274e7b80dd66e5014171fcb5" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kErrorVerbosity[]</definition>
        <argsstring>[]</argsstring>
        <name>kErrorVerbosity</name>
        <qualifiedname>testing::internal::kErrorVerbosity</qualifiedname>
        <initializer>= &quot;error&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="277" column="12" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-internal-utils_8cc_1a6d45f87feb7bb723110d251a34cc1026" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>char</type>
        <definition>char testing::internal::kBase64[]</definition>
        <argsstring>[]</argsstring>
        <name>kBase64</name>
        <qualifiedname>testing::internal::kBase64</qualifiedname>
        <initializer>=
    &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="225" column="23" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-internal-utils_8cc_1a7cf05a74beb4c2f702ac37da18be836a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>std::array&lt; char, 256 &gt;</type>
        <definition>std::array&lt;char, 256&gt; testing::internal::kUnBase64</definition>
        <argsstring></argsstring>
        <name>kUnBase64</name>
        <qualifiedname>testing::internal::kUnBase64</qualifiedname>
        <initializer>= UnBase64(kBase64)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="227" column="29" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-spec-builders_8cc_1a1b1f8431e32fe7315e218986de3920b8" prot="public" static="no" mutable="no">
        <type>GTEST_API_ <ref refid="classtesting_1_1internal_1_1_thread_local" kindref="compound">ThreadLocal</ref>&lt; Sequence * &gt;</type>
        <definition>GTEST_API_ ThreadLocal&lt;Sequence*&gt; testing::internal::g_gmock_implicit_sequence</definition>
        <argsstring></argsstring>
        <name>g_gmock_implicit_sequence</name>
        <qualifiedname>testing::internal::g_gmock_implicit_sequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-spec-builders.cc" line="280" column="24" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-spec-builders.cc" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-death-test-internal_8h_1a8572303d929880adf30db00952e1c45d" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kInternalRunDeathTestFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kInternalRunDeathTestFlag</name>
        <qualifiedname>testing::internal::kInternalRunDeathTestFlag</qualifiedname>
        <initializer>= &quot;internal_run_death_test&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-death-test-internal.h" line="57" column="12" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-death-test-internal.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal_8h_1abb38528ca6a45df265b19f5ccb3d16d9" prot="public" static="no" mutable="no">
        <type>GTEST_API_ const char</type>
        <definition>const char testing::internal::kStackTraceMarker</definition>
        <argsstring>[]</argsstring>
        <name>kStackTraceMarker</name>
        <qualifiedname>testing::internal::kStackTraceMarker</qualifiedname>
        <initializer>= &quot;\nStack trace:\n&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="206" column="12" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="206" bodyend="-1" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="123" declcolumn="30"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal_8h_1aa9523695296fff98b829b5223f7e51d9" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::TypeIdHelper&lt; T &gt;::dummy_</definition>
        <argsstring></argsstring>
        <name>TypeIdHelper&lt; T &gt;::dummy_</name>
        <qualifiedname>testing::internal::dummy_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="412" column="19" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal_8h_1ad7da35b6168ebdf6ce743fc557e2f748" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool testing::internal::IsHashTable&lt; T &gt;::value</definition>
        <argsstring></argsstring>
        <name>IsHashTable&lt; T &gt;::value</name>
        <qualifiedname>testing::internal::value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="962" column="24" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-port_8h_1a756613c601d58a38308fe85e5243de9e" prot="public" static="no" constexpr="yes" mutable="no">
        <type>BiggestInt</type>
        <definition>BiggestInt testing::internal::kMaxBiggestInt</definition>
        <argsstring></argsstring>
        <name>kMaxBiggestInt</name>
        <qualifiedname>testing::internal::kMaxBiggestInt</qualifiedname>
        <initializer>= (std::numeric_limits&lt;BiggestInt&gt;::max)()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2222" column="22" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1acac7993efabbd9dd62c1e9c7d143a72f" prot="public" static="no" extern="yes" mutable="no">
        <type>GTEST_API_ const TypeId</type>
        <definition>const TypeId testing::internal::kTestTypeIdInGoogleTest</definition>
        <argsstring></argsstring>
        <name>kTestTypeIdInGoogleTest</name>
        <qualifiedname>testing::internal::kTestTypeIdInGoogleTest</qualifiedname>
        <initializer>= GetTestTypeId()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="81" column="32" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="992" bodyend="-1" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="81" declcolumn="32"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1a41bd421ace53d23dbe85d9618c3afaee" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int testing::internal::kMaxRandomSeed</definition>
        <argsstring></argsstring>
        <name>kMaxRandomSeed</name>
        <qualifiedname>testing::internal::kMaxRandomSeed</qualifiedname>
        <initializer>= 99999</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="84" column="11" bodyfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1a93a772f5e51973b105d91cbb66a203f4" prot="public" static="no" mutable="no">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::g_help_flag</definition>
        <argsstring></argsstring>
        <name>g_help_flag</name>
        <qualifiedname>testing::internal::g_help_flag</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="210" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="210" bodyend="-1" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="88" declcolumn="24"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-port_8cc_1abae7a5775c901f2fd12b058b00d09840" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kUnknownFile[]</definition>
        <argsstring>[]</argsstring>
        <name>kUnknownFile</name>
        <qualifiedname>testing::internal::kUnknownFile</qualifiedname>
        <initializer>= &quot;unknown file&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-port.cc" line="999" column="12" bodyfile="build/_deps/googletest-src/googletest/src/gtest-port.cc" bodystart="999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1a1df44800b0d0c4eff5441c55ac9eb6a5" prot="public" static="no" mutable="no">
        <type>::std::vector&lt; std::string &gt;</type>
        <definition>::std::vector&lt;std::string&gt; testing::internal::g_argvs</definition>
        <argsstring></argsstring>
        <name>g_argvs</name>
        <qualifiedname>testing::internal::g_argvs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="645" column="22" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="645" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1ae6b23de1caf9f5ef3d35c8c94080d2ed" prot="public" static="no" constexpr="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t testing::internal::kMaxCodePoint1</definition>
        <argsstring></argsstring>
        <name>kMaxCodePoint1</name>
        <qualifiedname>testing::internal::kMaxCodePoint1</qualifiedname>
        <initializer>= (static_cast&lt;uint32_t&gt;(1) &lt;&lt; 7) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2002" column="20" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2002" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1ab54fbd28d72d0e89cf3f19276a351b4c" prot="public" static="no" constexpr="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t testing::internal::kMaxCodePoint2</definition>
        <argsstring></argsstring>
        <name>kMaxCodePoint2</name>
        <qualifiedname>testing::internal::kMaxCodePoint2</qualifiedname>
        <initializer>= (static_cast&lt;uint32_t&gt;(1) &lt;&lt; (5 + 6)) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2005" column="20" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2005" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1a8270c009ec5cfebee681d9605b8bb53f" prot="public" static="no" constexpr="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t testing::internal::kMaxCodePoint3</definition>
        <argsstring></argsstring>
        <name>kMaxCodePoint3</name>
        <qualifiedname>testing::internal::kMaxCodePoint3</qualifiedname>
        <initializer>=
    (static_cast&lt;uint32_t&gt;(1) &lt;&lt; (4 + 2 * 6)) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2008" column="20" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2008" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1af499adb5de60eaa2b3c5e6c87ebe44de" prot="public" static="no" constexpr="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t testing::internal::kMaxCodePoint4</definition>
        <argsstring></argsstring>
        <name>kMaxCodePoint4</name>
        <qualifiedname>testing::internal::kMaxCodePoint4</qualifiedname>
        <initializer>=
    (static_cast&lt;uint32_t&gt;(1) &lt;&lt; (3 + 3 * 6)) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2012" column="20" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2012" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1ae6e5e31b85dac8586d4cc1ab1671f438" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kTypeParamLabel[]</definition>
        <argsstring>[]</argsstring>
        <name>kTypeParamLabel</name>
        <qualifiedname>testing::internal::kTypeParamLabel</qualifiedname>
        <initializer>= &quot;TypeParam&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="3366" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="3366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1ae57eee0bf5371ff8e9688fb4464bc62b" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kValueParamLabel[]</definition>
        <argsstring>[]</argsstring>
        <name>kValueParamLabel</name>
        <qualifiedname>testing::internal::kValueParamLabel</qualifiedname>
        <initializer>= &quot;GetParam()&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="3367" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="3367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1a159395e649dd7728b09b25f70847f1ca" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kColorEncodedHelpMessage[]</definition>
        <argsstring>[]</argsstring>
        <name>kColorEncodedHelpMessage</name>
        <qualifiedname>testing::internal::kColorEncodedHelpMessage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6567" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-unittest-api__test_8cc_1a92b49076a2183a2796d2772315839f6a" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int testing::internal::kTypedTestSuites</definition>
        <argsstring></argsstring>
        <name>kTypedTestSuites</name>
        <qualifiedname>testing::internal::kTypedTestSuites</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" line="102" column="11" bodyfile="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-unittest-api__test_8cc_1a53ee2d113744f9ba1d89469db4d7388b" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int testing::internal::kTypedTests</definition>
        <argsstring></argsstring>
        <name>kTypedTests</name>
        <qualifiedname>testing::internal::kTypedTests</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" line="103" column="11" bodyfile="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" bodystart="103" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="gmock-actions_8h_1a8fe6f7c11d6d3dd6e42b75c9a5b43861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(void,)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="239" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="239" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a0a961f38f341d40237252babcb3767b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(::std::string, &quot;&quot;)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>::std::string</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="240" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="240" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1aa6670915f42119e4ba20d8cb74fc1eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(bool, false)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="241" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="241" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ab203e2c4c54f2ca86439344347a3e43f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(unsigned char, &apos;\0&apos;)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>unsigned char</type>
        </param>
        <param>
          <type>&apos;\0&apos;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="242" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="242" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1aaedb3b1b5307625bc84dc660742da3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(signed char, &apos;\0&apos;)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>signed char</type>
        </param>
        <param>
          <type>&apos;\0&apos;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="243" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="243" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1aeaaa7101572f283fe70a85ad5e6c65dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(char, &apos;\0&apos;)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>char</type>
        </param>
        <param>
          <type>&apos;\0&apos;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="244" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="244" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1aefa332dabf90868a76231aa324c7015f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(wchar_t, 0U)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>wchar_t</type>
        </param>
        <param>
          <type>0U</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="253" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="253" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ab2965a6078670393812e67f8e5fcb072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(unsigned short, 0U)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>unsigned short</type>
        </param>
        <param>
          <type>0U</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="256" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="256" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ae6ea5db83b290e2412f321c3b1eb8c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(signed short, 0)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>signed short</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="257" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="257" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a4285332d8eae4bdfffc13b6c05252c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(unsigned int, 0U)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>unsigned int</type>
        </param>
        <param>
          <type>0U</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="258" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="258" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a200a33af38e17df617883567c4fd96ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(signed int, 0)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>signed int</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="259" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="259" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a1f4167b954a7ff0074ce8a5bb855f86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(unsigned long, 0UL)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>unsigned long</type>
        </param>
        <param>
          <type>0UL</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="260" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="260" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ad8804e25537427755c324ab03a72e776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(signed long, 0L)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>signed long</type>
        </param>
        <param>
          <type>0L</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="261" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="261" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a9320ef876df4a3dff276a9df2965b81f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(unsigned long long, 0)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>unsigned long long</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="262" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="262" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a9a816b3e5d95850b4111fc9a3459d796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(signed long long, 0)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>signed long long</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="263" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="263" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a71c697e5b567365fd3ff6c720769633b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(float, 0)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="264" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="264" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a7ba92aa33f4968c902623cd02e445020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(double, 0)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <qualifiedname>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="265" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" declline="265" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ab7796d7eca036fb4869b98cffea9a46f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::add_const&lt; T &gt;::type &amp;</type>
        <definition>std::add_const&lt; T &gt;::type &amp; testing::internal::as_const</definition>
        <argsstring>(T &amp;t)</argsstring>
        <name>as_const</name>
        <qualifiedname>testing::internal::as_const</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="378" column="32" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="378" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a547fec1adf93915b51ae73e0efe0db18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename Impl</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_action" kindref="compound">::testing::Action</ref>&lt; F &gt;</type>
        <definition>::testing::Action&lt; F &gt; testing::internal::MakeAction</definition>
        <argsstring>()</argsstring>
        <name>MakeAction</name>
        <qualifiedname>testing::internal::MakeAction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="2205" column="19" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="2205" bodyend="2207"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a4c28221deb152dc3a2ff2c6f6816909f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename Impl</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_action" kindref="compound">::testing::Action</ref>&lt; F &gt;</type>
        <definition>::testing::Action&lt; F &gt; testing::internal::MakeAction</definition>
        <argsstring>(std::shared_ptr&lt; Impl &gt; impl)</argsstring>
        <name>MakeAction</name>
        <qualifiedname>testing::internal::MakeAction</qualifiedname>
        <param>
          <type>std::shared_ptr&lt; Impl &gt;</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="2211" column="19" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" bodystart="2211" bodyend="2213"/>
      </memberdef>
      <memberdef kind="function" id="gmock-function-mocker_8h_1ac93096c73f158bdb5877ea3204b4e23c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::PrefixOf</definition>
        <argsstring>(const char *a, const char *b)</argsstring>
        <name>PrefixOf</name>
        <qualifiedname>testing::internal::PrefixOf</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h" line="69" column="16" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="gmock-function-mocker_8h_1ae0522f740806da841ae21bc71804e038" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::StartsWith</definition>
        <argsstring>(const char(&amp;prefix)[N], const char(&amp;str)[M])</argsstring>
        <name>StartsWith</name>
        <qualifiedname>testing::internal::StartsWith</qualifiedname>
        <param>
          <type>const char(&amp;)</type>
          <declname>prefix</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const char(&amp;)</type>
          <declname>str</declname>
          <array>[M]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h" line="74" column="16" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="gmock-function-mocker_8h_1a4fe0a2f1ea296e6d92e6dcf8942818d6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::EndsWith</definition>
        <argsstring>(const char(&amp;suffix)[N], const char(&amp;str)[M])</argsstring>
        <name>EndsWith</name>
        <qualifiedname>testing::internal::EndsWith</qualifiedname>
        <param>
          <type>const char(&amp;)</type>
          <declname>suffix</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const char(&amp;)</type>
          <declname>str</declname>
          <array>[M]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h" line="79" column="16" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="gmock-function-mocker_8h_1a191a34dca5cca9ce07ede32629165d03" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::Equals</definition>
        <argsstring>(const char(&amp;a)[N], const char(&amp;b)[M])</argsstring>
        <name>Equals</name>
        <qualifiedname>testing::internal::Equals</qualifiedname>
        <param>
          <type>const char(&amp;)</type>
          <declname>a</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const char(&amp;)</type>
          <declname>b</declname>
          <array>[M]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h" line="84" column="16" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="gmock-function-mocker_8h_1ad5170b8cd7d49dd55747b4516b741b49" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::ValidateSpec</definition>
        <argsstring>(const char(&amp;spec)[N])</argsstring>
        <name>ValidateSpec</name>
        <qualifiedname>testing::internal::ValidateSpec</qualifiedname>
        <param>
          <type>const char(&amp;)</type>
          <declname>spec</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h" line="89" column="16" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-function-mocker.h" bodystart="89" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-actions_8h_1a1adfdd72431682ee2ce6ed1b8b751c6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>decltype(std::forward&lt; F &gt;(f)(args...))</type>
        <definition>decltype(std::forward&lt; F &gt;(f)(args...)) testing::internal::InvokeArgument</definition>
        <argsstring>(F &amp;&amp;f, Args... args)</argsstring>
        <name>InvokeArgument</name>
        <qualifiedname>testing::internal::InvokeArgument</qualifiedname>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-more-actions.h" line="595" column="6" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-more-actions.h" bodystart="595" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="gmock-nice-strict_8h_1ad22f77acf625ef4e861897a490c7068e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::true_type</type>
        <definition>std::true_type testing::internal::StrictnessModifierProbe</definition>
        <argsstring>(const NiceMock&lt; T &gt; &amp;)</argsstring>
        <name>StrictnessModifierProbe</name>
        <qualifiedname>testing::internal::StrictnessModifierProbe</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1_nice_mock" kindref="compound">NiceMock</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-nice-strict.h" line="82" column="16" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-nice-strict.h" declline="82" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="gmock-nice-strict_8h_1ac4138321699df568ce325fe2dd5835a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::true_type</type>
        <definition>std::true_type testing::internal::StrictnessModifierProbe</definition>
        <argsstring>(const NaggyMock&lt; T &gt; &amp;)</argsstring>
        <name>StrictnessModifierProbe</name>
        <qualifiedname>testing::internal::StrictnessModifierProbe</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1_naggy_mock" kindref="compound">NaggyMock</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-nice-strict.h" line="84" column="16" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-nice-strict.h" declline="84" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="gmock-nice-strict_8h_1a7e7bbe381d577ce690fe3f3644a9f84d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::true_type</type>
        <definition>std::true_type testing::internal::StrictnessModifierProbe</definition>
        <argsstring>(const StrictMock&lt; T &gt; &amp;)</argsstring>
        <name>StrictnessModifierProbe</name>
        <qualifiedname>testing::internal::StrictnessModifierProbe</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1_strict_mock" kindref="compound">StrictMock</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-nice-strict.h" line="86" column="16" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-nice-strict.h" declline="86" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="gmock-nice-strict_8h_1a398c4c32256d923b2a38fdbc622e96cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::false_type</type>
        <definition>std::false_type testing::internal::StrictnessModifierProbe</definition>
        <argsstring>(...)</argsstring>
        <name>StrictnessModifierProbe</name>
        <qualifiedname>testing::internal::StrictnessModifierProbe</qualifiedname>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-nice-strict.h" line="87" column="17" declfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-nice-strict.h" declline="87" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gmock-nice-strict_8h_1ae1f41ca6a1393a5f0117f09f97139f96" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::HasStrictnessModifier</definition>
        <argsstring>()</argsstring>
        <name>HasStrictnessModifier</name>
        <qualifiedname>testing::internal::HasStrictnessModifier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-nice-strict.h" line="90" column="16" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/gmock-nice-strict.h" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ac75a9353286d1b50c872ea2b195f3b4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>GTEST_API_ std::string testing::internal::JoinAsKeyValueTuple</definition>
        <argsstring>(const std::vector&lt; const char * &gt; &amp;names, const Strings &amp;values)</argsstring>
        <name>JoinAsKeyValueTuple</name>
        <qualifiedname>testing::internal::JoinAsKeyValueTuple</qualifiedname>
        <param>
          <type>const std::vector&lt; const char * &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <param>
          <type>const Strings &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="59" column="24" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="59" bodyend="75" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="66" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a0b375abcf3081393e6c420194a541b29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>GTEST_API_ std::string testing::internal::ConvertIdentifierNameToWords</definition>
        <argsstring>(const char *id_name)</argsstring>
        <name>ConvertIdentifierNameToWords</name>
        <qualifiedname>testing::internal::ConvertIdentifierNameToWords</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>id_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="81" column="24" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="81" bodyend="97" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="73" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ad5e7c706ea3ebdffa1429cf3677062bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Pointer</type>
          </param>
        </templateparamlist>
        <type>const Pointer::element_type *</type>
        <definition>const Pointer::element_type * testing::internal::GetRawPointer</definition>
        <argsstring>(const Pointer &amp;p)</argsstring>
        <name>GetRawPointer</name>
        <qualifiedname>testing::internal::GetRawPointer</qualifiedname>
        <param>
          <type>const Pointer &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="79" column="45" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1afdd3870510b38df6dff33f67b6ee0ced" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>const Element *</type>
        <definition>const Element * testing::internal::GetRawPointer</definition>
        <argsstring>(const std::reference_wrapper&lt; Element &gt; &amp;r)</argsstring>
        <name>GetRawPointer</name>
        <qualifiedname>testing::internal::GetRawPointer</qualifiedname>
        <param>
          <type>const std::reference_wrapper&lt; Element &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="85" column="22" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ae9f6499f55e30ff23f9ed914fb8ad597" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>Element *</type>
        <definition>Element * testing::internal::GetRawPointer</definition>
        <argsstring>(Element *p)</argsstring>
        <name>GetRawPointer</name>
        <qualifiedname>testing::internal::GetRawPointer</qualifiedname>
        <param>
          <type>Element *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="91" column="16" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a20f5584732e44a368e7acf295b639319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(bool, kBool)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>kBool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="143" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="143" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ac8f3722ca21d8b14f86e5c949e843508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(char, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>char</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="146" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="146" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ae5b8e77d245fd0838ab22e439e92e9af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(signed char, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>signed char</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="147" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="147" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ab13e89be2f0f22b1da9e22cd53bce5ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(unsigned char, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>unsigned char</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="148" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="148" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1af191a2be9cff1d5900426ef5aa59851e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(short, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>short</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="149" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="149" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a6138ee5ce9f509d39e874e4eedb89ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(unsigned short, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>unsigned short</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="150" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="150" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a59fb8e3bb6f1fec656ed8bdab0048f9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(int, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="151" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="151" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1abdce95ddf8b975d2a17e76a4c5a6c37f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(unsigned int, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>unsigned int</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="152" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="152" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a40597f856b3d94dc82e9fbbf9b027819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(long, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>long</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="153" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="153" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a8224329431c90b3d943cc43ac92e6e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(unsigned long, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>unsigned long</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="154" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="154" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a6f7d45c2ecfaa024f658b3657eb8cf69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(long long, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>long long</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="155" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="155" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1adf250c65b8eeda029c911bbfe8e1ff77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(unsigned long long, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>unsigned long long</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="156" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="156" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1af00aa2679c10ed170064e5ec5dd80e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(wchar_t, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>wchar_t</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="159" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="159" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ad4ebf1b53b79ac38fbd18ccf4d63ceca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(float, kFloatingPoint)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>kFloatingPoint</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="163" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="163" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a45748f4c08b868cb4939081769cdc7b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(double, kFloatingPoint)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>kFloatingPoint</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="164" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="164" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1af46fdd94d8aea0da729b554de443315f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(long double, kFloatingPoint)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <qualifiedname>testing::internal::GMOCK_DECLARE_KIND_</qualifiedname>
        <param>
          <type>long double</type>
        </param>
        <param>
          <type>kFloatingPoint</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="165" column="1" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="165" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a93a00bf550dcc6b1de870d24c624869c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1internal_1_1_failure_reporter_interface" kindref="compound">FailureReporterInterface</ref> *</type>
        <definition>GTEST_API_ FailureReporterInterface * testing::internal::GetFailureReporter</definition>
        <argsstring>()</argsstring>
        <name>GetFailureReporter</name>
        <qualifiedname>testing::internal::GetFailureReporter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="117" column="37" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="117" bodyend="126" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="236" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1aa46ca46a5898b2ac75184c62e0355621" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::Assert</definition>
        <argsstring>(bool condition, const char *file, int line, const std::string &amp;msg)</argsstring>
        <name>Assert</name>
        <qualifiedname>testing::internal::Assert</qualifiedname>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="243" column="13" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="243" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a23e71d198ce26b51f84a0b024dc3e054" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::Assert</definition>
        <argsstring>(bool condition, const char *file, int line)</argsstring>
        <name>Assert</name>
        <qualifiedname>testing::internal::Assert</qualifiedname>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="250" column="13" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ad93379317e10862a77b9fb90aa96e083" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::Expect</definition>
        <argsstring>(bool condition, const char *file, int line, const std::string &amp;msg)</argsstring>
        <name>Expect</name>
        <qualifiedname>testing::internal::Expect</qualifiedname>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="256" column="13" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="256" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a0dfe8a755bd02aa5ea162764b61a9d97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::Expect</definition>
        <argsstring>(bool condition, const char *file, int line)</argsstring>
        <name>Expect</name>
        <qualifiedname>testing::internal::Expect</qualifiedname>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="263" column="13" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="263" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a69ffdba5ee36743e88d8f89b79e566ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>GTEST_API_ bool testing::internal::LogIsVisible</definition>
        <argsstring>(LogSeverity severity)</argsstring>
        <name>LogIsVisible</name>
        <qualifiedname>testing::internal::LogIsVisible</qualifiedname>
        <param>
          <type>LogSeverity</type>
          <declname>severity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="133" column="17" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="133" bodyend="145" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="281" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a8a57ce0412334a3f487bbaa8321febbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::Log</definition>
        <argsstring>(LogSeverity severity, const std::string &amp;message, int stack_frames_to_skip)</argsstring>
        <name>Log</name>
        <qualifiedname>testing::internal::Log</qualifiedname>
        <param>
          <type>LogSeverity</type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stack_frames_to_skip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="154" column="17" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="154" bodyend="189" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="290" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ad4e02ea077a717f95a10a03c10272f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1internal_1_1_without_matchers" kindref="compound">WithoutMatchers</ref></type>
        <definition>GTEST_API_ WithoutMatchers testing::internal::GetWithoutMatchers</definition>
        <argsstring>()</argsstring>
        <name>GetWithoutMatchers</name>
        <qualifiedname>testing::internal::GetWithoutMatchers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="191" column="28" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="191" bodyend="191" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="306" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a3316c24e8a79f5def3e85d763ae50854" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T testing::internal::Invalid</definition>
        <argsstring>()</argsstring>
        <name>Invalid</name>
        <qualifiedname>testing::internal::Invalid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="314" column="10" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="314" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1aa67e1e9d28122eedffbb7b6636824f2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::IllegalDoDefault</definition>
        <argsstring>(const char *file, int line)</argsstring>
        <name>IllegalDoDefault</name>
        <qualifiedname>testing::internal::IllegalDoDefault</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="193" column="17" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="193" bodyend="201" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="421" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1acf46692279fb7f05fb339dc28b9ff750" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
        </templateparamlist>
        <type>decltype(std::forward&lt; F &gt;(f)(std::get&lt; Idx &gt;(std::forward&lt; Tuple &gt;(args))...))</type>
        <definition>decltype(std::forward&lt; F &gt;(f)(std::get&lt; Idx &gt;(std::forward&lt; Tuple &gt;(args))...)) testing::internal::ApplyImpl</definition>
        <argsstring>(F &amp;&amp;f, Tuple &amp;&amp;args, std::index_sequence&lt; Idx... &gt;)</argsstring>
        <name>ApplyImpl</name>
        <qualifiedname>testing::internal::ApplyImpl</qualifiedname>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Idx... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="424" column="6" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="424" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a0fa169044672083ecaf26a3fcf682f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>decltype(ApplyImpl(std::forward&lt; F &gt;(f), std::forward&lt; Tuple &gt;(args), std::make_index_sequence&lt; std::tuple_size&lt; typename std::remove_reference&lt; Tuple &gt;::type &gt;::value &gt;()))</type>
        <definition>decltype(ApplyImpl(std::forward&lt; F &gt;(f), std::forward&lt; Tuple &gt;(args), std::make_index_sequence&lt; std::tuple_size&lt; typename std::remove_reference&lt; Tuple &gt;::type &gt;::value &gt;())) testing::internal::Apply</definition>
        <argsstring>(F &amp;&amp;f, Tuple &amp;&amp;args)</argsstring>
        <name>Apply</name>
        <qualifiedname>testing::internal::Apply</qualifiedname>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" line="432" column="6" bodyfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="432" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a7ebfee596839f25b8aec40192af1dcdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::Base64Unescape</definition>
        <argsstring>(const std::string &amp;encoded, std::string *decoded)</argsstring>
        <name>Base64Unescape</name>
        <qualifiedname>testing::internal::Base64Unescape</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>encoded</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>decoded</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="229" column="6" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="229" bodyend="255" declfile="build/_deps/googletest-src/googlemock/include/gmock/internal/gmock-internal-utils.h" declline="482" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8cc_1a65647f11a4a74a4282c3cc6d422af0f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static testing::internal::GTEST_DEFINE_STATIC_MUTEX_</definition>
        <argsstring>(g_log_mutex)</argsstring>
        <name>GTEST_DEFINE_STATIC_MUTEX_</name>
        <qualifiedname>testing::internal::GTEST_DEFINE_STATIC_MUTEX_</qualifiedname>
        <param>
          <type>g_log_mutex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="129" column="8" declfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" declline="129" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8cc_1acc8e0d2730dae1cf63d44e6ca4b00132" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char testing::internal::UndoWebSafeEncoding</definition>
        <argsstring>(char c)</argsstring>
        <name>UndoWebSafeEncoding</name>
        <qualifiedname>testing::internal::UndoWebSafeEncoding</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="203" column="16" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8cc_1adfca7fa821221defcd7dae3868372da2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char testing::internal::UnBase64Impl</definition>
        <argsstring>(char c, const char *const base64, char carry)</argsstring>
        <name>UnBase64Impl</name>
        <qualifiedname>testing::internal::UnBase64Impl</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>base64</declname>
        </param>
        <param>
          <type>char</type>
          <declname>carry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="207" column="16" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="207" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8cc_1aaa45758dcba37eb3008fc3867f0abc84" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; char, 256 &gt;</type>
        <definition>std::array&lt; char, 256 &gt; testing::internal::UnBase64Impl</definition>
        <argsstring>(std::index_sequence&lt; I... &gt;, const char *const base64)</argsstring>
        <name>UnBase64Impl</name>
        <qualifiedname>testing::internal::UnBase64Impl</qualifiedname>
        <param>
          <type>std::index_sequence&lt; I... &gt;</type>
        </param>
        <param>
          <type>const char *const</type>
          <declname>base64</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="215" column="22" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="215" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8cc_1aab5c01a6ea90354b06ae1a1838b115c2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::array&lt; char, 256 &gt;</type>
        <definition>std::array&lt; char, 256 &gt; testing::internal::UnBase64</definition>
        <argsstring>(const char *const base64)</argsstring>
        <name>UnBase64</name>
        <qualifiedname>testing::internal::UnBase64</qualifiedname>
        <param>
          <type>const char *const</type>
          <declname>base64</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" line="221" column="22" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-internal-utils.cc" bodystart="221" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8cc_1a0b5ca34cad987efb767ee62300489e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>GTEST_API_ std::string testing::internal::FormatMatcherDescription</definition>
        <argsstring>(bool negation, const char *matcher_name, const std::vector&lt; const char * &gt; &amp;param_names, const Strings &amp;param_values)</argsstring>
        <name>FormatMatcherDescription</name>
        <qualifiedname>testing::internal::FormatMatcherDescription</qualifiedname>
        <param>
          <type>bool</type>
          <declname>negation</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>matcher_name</declname>
        </param>
        <param>
          <type>const std::vector&lt; const char * &gt; &amp;</type>
          <declname>param_names</declname>
        </param>
        <param>
          <type>const Strings &amp;</type>
          <declname>param_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-matchers.cc" line="52" column="24" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-matchers.cc" bodystart="52" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8cc_1ae30bd8357c179334b2b09b0d689efccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ ElementMatcherPairs</type>
        <definition>GTEST_API_ ElementMatcherPairs testing::internal::FindMaxBipartiteMatching</definition>
        <argsstring>(const MatchMatrix &amp;g)</argsstring>
        <name>FindMaxBipartiteMatching</name>
        <qualifiedname>testing::internal::FindMaxBipartiteMatching</qualifiedname>
        <param>
          <type>const MatchMatrix &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-matchers.cc" line="228" column="32" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-matchers.cc" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8cc_1a7e3ffe5f66db16c3ab89de55eac65bfa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::LogElementMatcherPairVec</definition>
        <argsstring>(const ElementMatcherPairs &amp;pairs, ::std::ostream *stream)</argsstring>
        <name>LogElementMatcherPairVec</name>
        <qualifiedname>testing::internal::LogElementMatcherPairVec</qualifiedname>
        <param>
          <type>const ElementMatcherPairs &amp;</type>
          <declname>pairs</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-matchers.cc" line="232" column="13" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-matchers.cc" bodystart="232" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="gmock-spec-builders_8cc_1a8c4aa7be8daa7b60e293071d70a89584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_</type>
        <definition>GTEST_API_ testing::internal::GTEST_DEFINE_STATIC_MUTEX_</definition>
        <argsstring>(g_gmock_mutex)</argsstring>
        <name>GTEST_DEFINE_STATIC_MUTEX_</name>
        <qualifiedname>testing::internal::GTEST_DEFINE_STATIC_MUTEX_</qualifiedname>
        <param>
          <type>g_gmock_mutex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-spec-builders.cc" line="70" column="12" declfile="build/_deps/googletest-src/googlemock/src/gmock-spec-builders.cc" declline="70" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="gmock-spec-builders_8cc_1a07f4411f23f8b1b731858be9dda3fdcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::LogWithLocation</definition>
        <argsstring>(testing::internal::LogSeverity severity, const char *file, int line, const std::string &amp;message)</argsstring>
        <name>LogWithLocation</name>
        <qualifiedname>testing::internal::LogWithLocation</qualifiedname>
        <param>
          <type>testing::internal::LogSeverity</type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-spec-builders.cc" line="73" column="17" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-spec-builders.cc" bodystart="73" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="gmock-spec-builders_8cc_1af045b703d8487374620a8106a76814ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::ReportUninterestingCall</definition>
        <argsstring>(CallReaction reaction, const std::string &amp;msg)</argsstring>
        <name>ReportUninterestingCall</name>
        <qualifiedname>testing::internal::ReportUninterestingCall</qualifiedname>
        <param>
          <type>CallReaction</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-spec-builders.cc" line="284" column="6" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-spec-builders.cc" bodystart="284" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="gmock-spec-builders_8cc_1a70e7f260fa4604020654325c5bc37769" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CallReaction</type>
        <definition>static CallReaction testing::internal::intToCallReaction</definition>
        <argsstring>(int mock_behavior)</argsstring>
        <name>intToCallReaction</name>
        <qualifiedname>testing::internal::intToCallReaction</qualifiedname>
        <param>
          <type>int</type>
          <declname>mock_behavior</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock-spec-builders.cc" line="446" column="21" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-spec-builders.cc" bodystart="446" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8cc_1af52b1c74d0a0d6c13234d81080513568" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * testing::internal::ParseGoogleMockFlagValue</definition>
        <argsstring>(const char *str, const char *flag_name, bool def_optional)</argsstring>
        <name>ParseGoogleMockFlagValue</name>
        <qualifiedname>testing::internal::ParseGoogleMockFlagValue</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>def_optional</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock.cc" line="62" column="19" bodyfile="build/_deps/googletest-src/googlemock/src/gmock.cc" bodystart="62" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8cc_1ac92af14d6768e445e1d89eeea2dcbe45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::ParseGoogleMockFlag</definition>
        <argsstring>(const char *str, const char *flag_name, bool *value)</argsstring>
        <name>ParseGoogleMockFlag</name>
        <qualifiedname>testing::internal::ParseGoogleMockFlag</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock.cc" line="95" column="13" bodyfile="build/_deps/googletest-src/googlemock/src/gmock.cc" bodystart="95" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8cc_1a5f2855617f5b51cf2a1b2155cf349f3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class_string" kindref="compound">String</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool testing::internal::ParseGoogleMockFlag</definition>
        <argsstring>(const char *str, const char *flag_name, String *value)</argsstring>
        <name>ParseGoogleMockFlag</name>
        <qualifiedname>testing::internal::ParseGoogleMockFlag</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_string" kindref="compound">String</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock.cc" line="114" column="13" bodyfile="build/_deps/googletest-src/googlemock/src/gmock.cc" bodystart="114" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8cc_1ad5aa39fc2284332f6e7d45e0f9a0ea37" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::ParseGoogleMockFlag</definition>
        <argsstring>(const char *str, const char *flag_name, int32_t *value)</argsstring>
        <name>ParseGoogleMockFlag</name>
        <qualifiedname>testing::internal::ParseGoogleMockFlag</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock.cc" line="127" column="13" bodyfile="build/_deps/googletest-src/googlemock/src/gmock.cc" bodystart="127" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8cc_1a3823844199df88af9493026031cf7744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::InitGoogleMockImpl</definition>
        <argsstring>(int *argc, CharType **argv)</argsstring>
        <name>InitGoogleMockImpl</name>
        <qualifiedname>testing::internal::InitGoogleMockImpl</qualifiedname>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>CharType **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/src/gmock.cc" line="145" column="6" bodyfile="build/_deps/googletest-src/googlemock/src/gmock.cc" bodystart="145" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="gtest-message_8h_1aad4beed95d0846e6ffc5da0978ef3bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string testing::internal::StreamableToString</definition>
        <argsstring>(const T &amp;streamable)</argsstring>
        <name>StreamableToString</name>
        <qualifiedname>testing::internal::StreamableToString</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>streamable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-message.h" line="242" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-message.h" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a30708fa2bacf11895b03bdb21eb72309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::UniversalPrint</definition>
        <argsstring>(const T &amp;value, ::std::ostream *os)</argsstring>
        <name>UniversalPrint</name>
        <qualifiedname>testing::internal::UniversalPrint</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="1183" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="1183" bodyend="1188" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="140" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1aa287a88fcd0b97a13f7e243bbafe34f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::PrintBytesInObjectTo</definition>
        <argsstring>(const unsigned char *obj_bytes, size_t count, ::std::ostream *os)</argsstring>
        <name>PrintBytesInObjectTo</name>
        <qualifiedname>testing::internal::PrintBytesInObjectTo</qualifiedname>
        <param>
          <type>const unsigned char *</type>
          <declname>obj_bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="310" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="310" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a5e9f744566e02ba3f811cd51d3b8c4fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintWithFallback</definition>
        <argsstring>(const T &amp;value, ::std::ostream *os)</argsstring>
        <name>PrintWithFallback</name>
        <qualifiedname>testing::internal::PrintWithFallback</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="352" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="352" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a3682f962ae0ec1c0eca6444ca0a09e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</definition>
        <argsstring>(char)</argsstring>
        <name>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</name>
        <qualifiedname>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</qualifiedname>
        <param>
          <type>char</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="409" column="1" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="409" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a85e08f00d443221e529a0a85a90fbaeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</definition>
        <argsstring>(wchar_t)</argsstring>
        <name>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</name>
        <qualifiedname>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</qualifiedname>
        <param>
          <type>wchar_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="411" column="1" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="411" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ad33ad5ec1d4705104387c526ea7d59f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</definition>
        <argsstring>(char16_t)</argsstring>
        <name>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</name>
        <qualifiedname>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</qualifiedname>
        <param>
          <type>char16_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="417" column="1" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="417" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a67ea647ee3d547e58db86a9ee2bb797a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</definition>
        <argsstring>(char32_t)</argsstring>
        <name>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</name>
        <qualifiedname>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</qualifiedname>
        <param>
          <type>char32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="419" column="1" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="419" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1aeac30230dcc362221bdd07d61eaa4ec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</definition>
        <argsstring>(char, ::std::string)</argsstring>
        <name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name>
        <qualifiedname>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</qualifiedname>
        <param>
          <type>char</type>
        </param>
        <param>
          <type>::std::string</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="436" column="1" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="436" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1acff745e750898f27701cc96a7238754c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</definition>
        <argsstring>(char16_t, ::std::u16string)</argsstring>
        <name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name>
        <qualifiedname>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</qualifiedname>
        <param>
          <type>char16_t</type>
        </param>
        <param>
          <type>::std::u16string</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="442" column="1" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="442" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a347584b3f2adc08d5e6b45c9004f2c16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</definition>
        <argsstring>(char32_t, ::std::u32string)</argsstring>
        <name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name>
        <qualifiedname>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</qualifiedname>
        <param>
          <type>char32_t</type>
        </param>
        <param>
          <type>::std::u32string</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="444" column="1" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="444" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a91ab078f10adc669f09b7f604975c518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string testing::internal::FormatForComparisonFailureMessage</definition>
        <argsstring>(const T1 &amp;value, const T2 &amp;)</argsstring>
        <name>FormatForComparisonFailureMessage</name>
        <qualifiedname>testing::internal::FormatForComparisonFailureMessage</qualifiedname>
        <param>
          <type>const T1 &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="463" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="463" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1adb3c27150dbe661db0e0c4be27533460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const T &amp;value, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="490" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="490" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ab7524d6d3ab8c31b1deea88bf61783bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(unsigned char c, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>unsigned char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="276" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="276" bodyend="276" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="499" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ad453af399370e394881079c243abacb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(signed char c, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>signed char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="277" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="277" bodyend="277" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="500" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a476bd3d411d4f129620aaf8999c257c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(char c, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="501" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="501" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a2979ac1ad3e05c51dcd7dca2eb34e6ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(bool x, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>bool</type>
          <declname>x</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="509" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="509" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a6c50fd437a2ae2ff6f182ccd6c2744dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::PrintTo</definition>
        <argsstring>(wchar_t wc, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>wchar_t</type>
          <declname>wc</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="520" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="520" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a724b53b854fd9b16e6604a422e8dea46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(char32_t c, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>char32_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="284" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="284" bodyend="287" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="522" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a652e048970086752066fc943bb676668" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(char16_t c, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>char16_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="523" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="523" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a99979e0fcb3073f8c1682b88a7a8d378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FloatType</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int testing::internal::AppropriateResolution</definition>
        <argsstring>(FloatType val)</argsstring>
        <name>AppropriateResolution</name>
        <qualifiedname>testing::internal::AppropriateResolution</qualifiedname>
        <param>
          <type>FloatType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="555" column="5" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="555" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1aa7e7ffa9017368e4cdde898fea4d6daa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(float f, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="619" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="619" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a05931c88d9ccdb0138fc476ee8c5cece" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(double d, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="626" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="626" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ac226053b96d7d61f9407e3b75bab07d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::PrintTo</definition>
        <argsstring>(const char *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="634" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="634" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a553eec7bb50de01c9e91cac4accc606f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(char *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="635" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="635" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a792cc5665a34619ed7a6d54711433456" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const signed char *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const signed char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="641" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="641" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a1320096b116f8cc4b688acbd5b783051" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(signed char *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>signed char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="644" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="644" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a42c591f2164ad105b502a9262333aed2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const unsigned char *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const unsigned char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="647" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="647" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a7fae797c500d66d0f5a9db4f205e3416" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(unsigned char *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>unsigned char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="650" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="650" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a7f3f12f7f29d591bca504c6f43f192a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::PrintTo</definition>
        <argsstring>(const char16_t *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const char16_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="661" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="661" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a3d7b09c7d5688f94db5554f0d9f16f35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(char16_t *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>char16_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="662" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="662" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a90d42d917e8f0a2cb6c55865d33c8410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::PrintTo</definition>
        <argsstring>(const char32_t *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const char32_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="666" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="666" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a9bc1e33e81d7eec4fd38a162712c9416" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(char32_t *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>char32_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="667" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="667" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1afb038075e9e2166d1d9158a19e0eed23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::PrintTo</definition>
        <argsstring>(const wchar_t *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="678" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="678" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a8d41baa371fad3eb5a3dbe1bbc02c290" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(wchar_t *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>wchar_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="679" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="679" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ad3013b6b4c825edee9fe18ff1d982faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintRawArrayTo</definition>
        <argsstring>(const T a[], size_t count, ::std::ostream *os)</argsstring>
        <name>PrintRawArrayTo</name>
        <qualifiedname>testing::internal::PrintRawArrayTo</qualifiedname>
        <param>
          <type>const T</type>
          <declname>a</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="690" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="690" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a8b53e46cea3f8bdfc9342057c4f6ba62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::PrintStringTo</definition>
        <argsstring>(const ::std::string &amp;s, ::std::ostream *os)</argsstring>
        <name>PrintStringTo</name>
        <qualifiedname>testing::internal::PrintStringTo</qualifiedname>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="699" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="699" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1af59b4f5d83276cd807c45063b14bad44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const ::std::string &amp;s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="700" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="700" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1abcf093a2c7a87703b5288a518b53c842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::PrintU16StringTo</definition>
        <argsstring>(const ::std::u16string &amp;s, ::std::ostream *os)</argsstring>
        <name>PrintU16StringTo</name>
        <qualifiedname>testing::internal::PrintU16StringTo</qualifiedname>
        <param>
          <type>const ::std::u16string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="713" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="713" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a07c81c231dcb204cce575a83dc2cf36c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const ::std::u16string &amp;s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const ::std::u16string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="714" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="714" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a22833e6e7dbdf8d69060775402abed94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::PrintU32StringTo</definition>
        <argsstring>(const ::std::u32string &amp;s, ::std::ostream *os)</argsstring>
        <name>PrintU32StringTo</name>
        <qualifiedname>testing::internal::PrintU32StringTo</qualifiedname>
        <param>
          <type>const ::std::u32string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="719" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="719" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a19b04c78a00c67cc13ee83584dbcb51c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const ::std::u32string &amp;s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const ::std::u32string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="720" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="720" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a76f564cf23190dbd5c9e088defdd092b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(std::nullptr_t, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="739" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="739" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a5587d09db034bc597870ae86bd8c01f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(std::reference_wrapper&lt; T &gt; ref, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>std::reference_wrapper&lt; T &gt;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="748" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="748" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a70c297dd72402c12ec14cf8c5bd2951a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * testing::internal::VoidifyPointer</definition>
        <argsstring>(const void *p)</argsstring>
        <name>VoidifyPointer</name>
        <qualifiedname>testing::internal::VoidifyPointer</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="752" column="19" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="752" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1acaf2b2150e74287976650e80412fb923" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * testing::internal::VoidifyPointer</definition>
        <argsstring>(volatile const void *p)</argsstring>
        <name>VoidifyPointer</name>
        <qualifiedname>testing::internal::VoidifyPointer</qualifiedname>
        <param>
          <type>volatile const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="753" column="19" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="753" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a525d401614692eb59ffa82e90c7263a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Ptr</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintSmartPointer</definition>
        <argsstring>(const Ptr &amp;ptr, std::ostream *os, char)</argsstring>
        <name>PrintSmartPointer</name>
        <qualifiedname>testing::internal::PrintSmartPointer</qualifiedname>
        <param>
          <type>const Ptr &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::ostream *</type>
          <declname>os</declname>
        </param>
        <param>
          <type>char</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="758" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="758" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a06c16d9c3986b3e28d762a56691d7324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Ptr</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;!std::is_void&lt;T&gt;::value &amp;&amp;                                             !std::is_array&lt;T&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintSmartPointer</definition>
        <argsstring>(const Ptr &amp;ptr, std::ostream *os, int)</argsstring>
        <name>PrintSmartPointer</name>
        <qualifiedname>testing::internal::PrintSmartPointer</qualifiedname>
        <param>
          <type>const Ptr &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::ostream *</type>
          <declname>os</declname>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="769" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="769" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a4052225063f1c55dd11e929147727038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename D</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const std::unique_ptr&lt; T, D &gt; &amp;ptr, std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const std::unique_ptr&lt; T, D &gt; &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="780" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="780" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a536d2062728e1d7b9337c1ba2c283365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const std::shared_ptr&lt; T &gt; &amp;ptr, std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; T &gt; &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="785" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="785" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a7174fbf5d6ba458afae675022c9aae1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintTupleTo</definition>
        <argsstring>(const T &amp;, std::integral_constant&lt; size_t, 0 &gt;, ::std::ostream *)</argsstring>
        <name>PrintTupleTo</name>
        <qualifiedname>testing::internal::PrintTupleTo</qualifiedname>
        <param>
          <type>const T &amp;</type>
        </param>
        <param>
          <type>std::integral_constant&lt; size_t, 0 &gt;</type>
        </param>
        <param>
          <type>::std::ostream *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="827" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="827" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a3580971ab4571dc9a00f4ed0e17fd777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintTupleTo</definition>
        <argsstring>(const T &amp;t, std::integral_constant&lt; size_t, I &gt;, ::std::ostream *os)</argsstring>
        <name>PrintTupleTo</name>
        <qualifiedname>testing::internal::PrintTupleTo</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>std::integral_constant&lt; size_t, I &gt;</type>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="831" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="831" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a5628347cba9a345f56087fdb70930fc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const ::std::tuple&lt; Types... &gt; &amp;t, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const ::std::tuple&lt; Types... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="844" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="844" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1af2c33928facbf2edf7af564278724d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const ::std::pair&lt; T1, T2 &gt; &amp;value, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const ::std::pair&lt; T1, T2 &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="852" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="852" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ad79d71c3110f8eb24ab352d68f29436a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const T *begin, size_t len, ::std::ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <qualifiedname>testing::internal::UniversalPrintArray</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="984" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="984" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a72c997dbd2c562110b2cb56c359decfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const char *begin, size_t len, ::std::ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <qualifiedname>testing::internal::UniversalPrintArray</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="1005" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="1005" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a837b7854d2561b755b90385d029097d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const char16_t *begin, size_t len, ::std::ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <qualifiedname>testing::internal::UniversalPrintArray</qualifiedname>
        <param>
          <type>const char16_t *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="1015" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="1015" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1adae08a05fbb646ff85eb6225f85cafbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const char32_t *begin, size_t len, ::std::ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <qualifiedname>testing::internal::UniversalPrintArray</qualifiedname>
        <param>
          <type>const char32_t *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="1019" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="1019" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ae31e146c35fd75afc6a9cc73ae2692d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const wchar_t *begin, size_t len, ::std::ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <qualifiedname>testing::internal::UniversalPrintArray</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="1023" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" declline="1023" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1afa92f5a284929dc3723e654a25feb7b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::UniversalTersePrint</definition>
        <argsstring>(const T &amp;value, ::std::ostream *os)</argsstring>
        <name>UniversalTersePrint</name>
        <qualifiedname>testing::internal::UniversalTersePrint</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="1174" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="1174" bodyend="1176"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a6300aa1440d0019cf08d9a1f6efd4382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::TersePrintPrefixToStrings</definition>
        <argsstring>(const Tuple &amp;, std::integral_constant&lt; size_t, 0 &gt;, Strings *)</argsstring>
        <name>TersePrintPrefixToStrings</name>
        <qualifiedname>testing::internal::TersePrintPrefixToStrings</qualifiedname>
        <param>
          <type>const Tuple &amp;</type>
        </param>
        <param>
          <type>std::integral_constant&lt; size_t, 0 &gt;</type>
        </param>
        <param>
          <type>Strings *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="1195" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="1195" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ab244273c02742a3fac45cc241befc536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::TersePrintPrefixToStrings</definition>
        <argsstring>(const Tuple &amp;t, std::integral_constant&lt; size_t, I &gt;, Strings *strings)</argsstring>
        <name>TersePrintPrefixToStrings</name>
        <qualifiedname>testing::internal::TersePrintPrefixToStrings</qualifiedname>
        <param>
          <type>const Tuple &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>std::integral_constant&lt; size_t, I &gt;</type>
        </param>
        <param>
          <type>Strings *</type>
          <declname>strings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="1198" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="1198" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a7e60d1478b074801c766eeee9be6c772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>Strings</type>
        <definition>Strings testing::internal::UniversalTersePrintTupleFieldsToStrings</definition>
        <argsstring>(const Tuple &amp;value)</argsstring>
        <name>UniversalTersePrintTupleFieldsToStrings</name>
        <qualifiedname>testing::internal::UniversalTersePrintTupleFieldsToStrings</qualifiedname>
        <param>
          <type>const Tuple &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" line="1212" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="1212" bodyend="1218"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a9bd0caf5d16512de38b39599c13ee634" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>class <ref refid="classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">UnitTestImpl</ref> *</type>
        <definition>UnitTestImpl * testing::internal::GetUnitTestImpl</definition>
        <argsstring>()</argsstring>
        <name>GetUnitTestImpl</name>
        <qualifiedname>testing::internal::GetUnitTestImpl</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="978" column="21" bodyfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" bodystart="978" bodyend="980" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" declline="188" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a85f6ff0e40f9a5f10af66a73cf1364fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::ReportFailureInUnknownLocation</definition>
        <argsstring>(TestPartResult::Type result_type, const std::string &amp;message)</argsstring>
        <name>ReportFailureInUnknownLocation</name>
        <qualifiedname>testing::internal::ReportFailureInUnknownLocation</qualifiedname>
        <param>
          <type>TestPartResult::Type</type>
          <declname>result_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2526" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2526" bodyend="2536" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" declline="189" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1af4e3dd7984d2fbd8df81e8ffb57c5cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; std::string &gt; *</type>
        <definition>std::set&lt; std::string &gt; * testing::internal::GetIgnoredParameterizedTestSuites</definition>
        <argsstring>()</argsstring>
        <name>GetIgnoredParameterizedTestSuites</name>
        <qualifiedname>testing::internal::GetIgnoredParameterizedTestSuites</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="522" column="10" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="522" bodyend="524" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" declline="191" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a1def8ec9393360a1b34a20528703e7f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperEQFailure</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, const T1 &amp;lhs, const T2 &amp;rhs)</argsstring>
        <name>CmpHelperEQFailure</name>
        <qualifiedname>testing::internal::CmpHelperEQFailure</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="1374" column="17" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="1374" bodyend="1380"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a5e3e473798de3189e9343132bcfd4fea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::operator==</definition>
        <argsstring>(faketype, faketype)</argsstring>
        <name>operator==</name>
        <qualifiedname>testing::internal::operator==</qualifiedname>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1faketype" kindref="compound">faketype</ref></type>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1faketype" kindref="compound">faketype</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="1386" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="1386" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1afa44fdec84edfc155ef63e4f0d4287cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::operator!=</definition>
        <argsstring>(faketype, faketype)</argsstring>
        <name>operator!=</name>
        <qualifiedname>testing::internal::operator!=</qualifiedname>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1faketype" kindref="compound">faketype</ref></type>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1faketype" kindref="compound">faketype</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="1387" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="1387" bodyend="1387"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a4638c74d9b32e971f9b321af6fafc2f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperEQ</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, const T1 &amp;lhs, const T2 &amp;rhs)</argsstring>
        <name>CmpHelperEQ</name>
        <qualifiedname>testing::internal::CmpHelperEQ</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="1391" column="17" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="1391" bodyend="1399"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a894ffccd936d78fd555f490020c27f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperOpFailure</definition>
        <argsstring>(const char *expr1, const char *expr2, const T1 &amp;val1, const T2 &amp;val2, const char *op)</argsstring>
        <name>CmpHelperOpFailure</name>
        <qualifiedname>testing::internal::CmpHelperOpFailure</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>val2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="1443" column="17" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="1443" bodyend="1450"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a711a396ed8f636ecd14a850a89d181b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperSTREQ</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const char *s1, const char *s2)</argsstring>
        <name>CmpHelperSTREQ</name>
        <qualifiedname>testing::internal::CmpHelperSTREQ</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="1770" column="17" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="1770" bodyend="1779" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" declline="1487" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a30dfeb01f1bc8087c7d05205d5fa75c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperSTRCASEEQ</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const char *s1, const char *s2)</argsstring>
        <name>CmpHelperSTRCASEEQ</name>
        <qualifiedname>testing::internal::CmpHelperSTRCASEEQ</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="1782" column="17" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="1782" bodyend="1791" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" declline="1494" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1af2d31c77ce73e1003a64bd7ca3564bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperSTRNE</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const char *s1, const char *s2)</argsstring>
        <name>CmpHelperSTRNE</name>
        <qualifiedname>testing::internal::CmpHelperSTRNE</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="1794" column="17" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="1794" bodyend="1804" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" declline="1501" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a7e31d489f06ab8f6a81a7729f0c377e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperSTRCASENE</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const char *s1, const char *s2)</argsstring>
        <name>CmpHelperSTRCASENE</name>
        <qualifiedname>testing::internal::CmpHelperSTRCASENE</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="1807" column="17" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="1807" bodyend="1817" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" declline="1508" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1ad351878f87634853c4eb005fe9b169a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperSTREQ</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const wchar_t *s1, const wchar_t *s2)</argsstring>
        <name>CmpHelperSTREQ</name>
        <qualifiedname>testing::internal::CmpHelperSTREQ</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2142" column="17" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2142" bodyend="2151" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" declline="1515" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a415a953647bbc9469f062dc966061efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperSTRNE</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const wchar_t *s1, const wchar_t *s2)</argsstring>
        <name>CmpHelperSTRNE</name>
        <qualifiedname>testing::internal::CmpHelperSTRNE</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2154" column="17" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2154" bodyend="2164" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" declline="1522" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a98ce463e5dbe0c6120fa817e1f8f2944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RawType</type>
          </param>
        </templateparamlist>
        <type>AssertionResult</type>
        <definition>AssertionResult testing::internal::CmpHelperFloatingPointEQ</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, RawType lhs_value, RawType rhs_value)</argsstring>
        <name>CmpHelperFloatingPointEQ</name>
        <qualifiedname>testing::internal::CmpHelperFloatingPointEQ</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>RawType</type>
          <declname>lhs_value</declname>
        </param>
        <param>
          <type>RawType</type>
          <declname>rhs_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/gtest.h" line="1582" column="17" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" bodystart="1582" bodyend="1602"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a4f70b36c624b54c2362aeecc2f05ee8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ AssertionResult</type>
        <definition>AssertionResult testing::internal::DoubleNearPredFormat</definition>
        <argsstring>(const char *expr1, const char *expr2, const char *abs_error_expr, double val1, double val2, double abs_error)</argsstring>
        <name>DoubleNearPredFormat</name>
        <qualifiedname>testing::internal::DoubleNearPredFormat</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>abs_error_expr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>abs_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="1667" column="17" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="1667" bodyend="1716" declfile="build/_deps/googletest-src/googletest/include/gtest/gtest.h" declline="1607" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="gtest-death-test-internal_8h_1abb508a901f6ec6b7e3fa355e14d080b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; const ::std::string &amp; &gt;</type>
        <definition>Matcher&lt; const ::std::string &amp; &gt; testing::internal::MakeDeathTestMatcher</definition>
        <argsstring>(::testing::internal::RE regex)</argsstring>
        <name>MakeDeathTestMatcher</name>
        <qualifiedname>testing::internal::MakeDeathTestMatcher</qualifiedname>
        <param>
          <type>::testing::internal::RE</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-death-test-internal.h" line="62" column="16" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-death-test-internal.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="gtest-death-test-internal_8h_1adfe73aacd5a36b16946ec8a8edb2fdd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; const ::std::string &amp; &gt;</type>
        <definition>Matcher&lt; const ::std::string &amp; &gt; testing::internal::MakeDeathTestMatcher</definition>
        <argsstring>(const char *regex)</argsstring>
        <name>MakeDeathTestMatcher</name>
        <qualifiedname>testing::internal::MakeDeathTestMatcher</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-death-test-internal.h" line="66" column="16" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-death-test-internal.h" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="gtest-death-test-internal_8h_1acd8b0a7e22e4e342cdb1781fe0b964dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; const ::std::string &amp; &gt;</type>
        <definition>Matcher&lt; const ::std::string &amp; &gt; testing::internal::MakeDeathTestMatcher</definition>
        <argsstring>(const ::std::string &amp;regex)</argsstring>
        <name>MakeDeathTestMatcher</name>
        <qualifiedname>testing::internal::MakeDeathTestMatcher</qualifiedname>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-death-test-internal.h" line="69" column="16" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-death-test-internal.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="gtest-death-test-internal_8h_1ae4487dc13027849f95bd99fe0d71f6fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; const ::std::string &amp; &gt;</type>
        <definition>Matcher&lt; const ::std::string &amp; &gt; testing::internal::MakeDeathTestMatcher</definition>
        <argsstring>(Matcher&lt; const ::std::string &amp; &gt; matcher)</argsstring>
        <name>MakeDeathTestMatcher</name>
        <qualifiedname>testing::internal::MakeDeathTestMatcher</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; const ::std::string &amp; &gt;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-death-test-internal.h" line="76" column="16" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-death-test-internal.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1ae475a090bca903bb222dd389eb189166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::AppendUserMessage</definition>
        <argsstring>(const std::string &amp;gtest_msg, const Message &amp;user_msg)</argsstring>
        <name>AppendUserMessage</name>
        <qualifiedname>testing::internal::AppendUserMessage</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>gtest_msg</declname>
        </param>
        <param>
          <type>const <ref refid="classtesting_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>user_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2276" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2276" bodyend="2287" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="144" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a08725846ff184d3e79bcf5be4df19157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ AssertionResult</type>
        <definition>AssertionResult testing::internal::EqFailure</definition>
        <argsstring>(const char *expected_expression, const char *actual_expression, const std::string &amp;expected_value, const std::string &amp;actual_value, bool ignoring_case)</argsstring>
        <name>EqFailure</name>
        <qualifiedname>testing::internal::EqFailure</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>expected_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>actual_expression</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>expected_value</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>actual_value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoring_case</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="1619" column="17" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="1619" bodyend="1648" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="204" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a5fd6e5dc9eb20ab3c3a80e24d89dfac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::GetBoolAssertionFailureMessage</definition>
        <argsstring>(const AssertionResult &amp;assertion_result, const char *expression_text, const char *actual_predicate_value, const char *expected_predicate_value)</argsstring>
        <name>GetBoolAssertionFailureMessage</name>
        <qualifiedname>testing::internal::GetBoolAssertionFailureMessage</qualifiedname>
        <param>
          <type>const AssertionResult &amp;</type>
          <declname>assertion_result</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expression_text</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>actual_predicate_value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expected_predicate_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="1651" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="1651" bodyend="1661" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="211" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a6b108e56fdc68ea937ffb3759fb55ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>TypeId</type>
        <definition>TypeId testing::internal::GetTypeId</definition>
        <argsstring>()</argsstring>
        <name>GetTypeId</name>
        <qualifiedname>testing::internal::GetTypeId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="418" column="8" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="418" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1ad0d66d56ead224263cd100c1d6bfc562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ TypeId</type>
        <definition>TypeId testing::internal::GetTestTypeId</definition>
        <argsstring>()</argsstring>
        <name>GetTestTypeId</name>
        <qualifiedname>testing::internal::GetTestTypeId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="988" column="8" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="988" bodyend="988" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="431" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a9579a78c229ea302caded45d65f77336" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SetUpTearDownSuiteFuncType</type>
        <definition>SetUpTearDownSuiteFuncType testing::internal::GetNotDefaultOrNull</definition>
        <argsstring>(SetUpTearDownSuiteFuncType a, SetUpTearDownSuiteFuncType def)</argsstring>
        <name>GetNotDefaultOrNull</name>
        <qualifiedname>testing::internal::GetNotDefaultOrNull</qualifiedname>
        <param>
          <type>SetUpTearDownSuiteFuncType</type>
          <declname>a</declname>
        </param>
        <param>
          <type>SetUpTearDownSuiteFuncType</type>
          <declname>def</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="490" column="35" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="490" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a3dda978293c8f8ab4f31f179cdbed33d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref> *</type>
        <definition>TestInfo * testing::internal::MakeAndRegisterTestInfo</definition>
        <argsstring>(std::string test_suite_name, const char *name, const char *type_param, const char *value_param, CodeLocation code_location, TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc, TearDownTestSuiteFunc tear_down_tc, TestFactoryBase *factory)</argsstring>
        <name>MakeAndRegisterTestInfo</name>
        <qualifiedname>testing::internal::MakeAndRegisterTestInfo</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>test_suite_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type_param</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value_param</declname>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1_code_location" kindref="compound">CodeLocation</ref></type>
          <declname>code_location</declname>
        </param>
        <param>
          <type>TypeId</type>
          <declname>fixture_class_id</declname>
        </param>
        <param>
          <type>SetUpTestSuiteFunc</type>
          <declname>set_up_tc</declname>
        </param>
        <param>
          <type>TearDownTestSuiteFunc</type>
          <declname>tear_down_tc</declname>
        </param>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_test_factory_base" kindref="compound">TestFactoryBase</ref> *</type>
          <declname>factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2802" column="10" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2802" bodyend="2812" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="566" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a244d9a3765727306b597b8992ab84036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::SkipPrefix</definition>
        <argsstring>(const char *prefix, const char **pstr)</argsstring>
        <name>SkipPrefix</name>
        <qualifiedname>testing::internal::SkipPrefix</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>pstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6413" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6413" bodyend="6420" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="575" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a2c5082b8e3ad1fab3ebb45222467fe48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_DISABLE_MSC_WARNINGS_PUSH_</definition>
        <argsstring>(4251) class GTEST_API_ TypedTestSuitePState</argsstring>
        <name>GTEST_DISABLE_MSC_WARNINGS_PUSH_</name>
        <qualifiedname>testing::internal::GTEST_DISABLE_MSC_WARNINGS_PUSH_</qualifiedname>
        <param>
          <type>4251</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="577" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="577" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1ad5c552225eb46fca3889e6cd6486278d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * testing::internal::SkipComma</definition>
        <argsstring>(const char *str)</argsstring>
        <name>SkipComma</name>
        <qualifiedname>testing::internal::SkipComma</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="635" column="19" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="635" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a42d633fb359d696157347720aa0ff66c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string testing::internal::GetPrefixUntilComma</definition>
        <argsstring>(const char *str)</argsstring>
        <name>GetPrefixUntilComma</name>
        <qualifiedname>testing::internal::GetPrefixUntilComma</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="647" column="20" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="647" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1abe96bddcee27b4b69ce2b76cde6855a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::SplitString</definition>
        <argsstring>(const ::std::string &amp;str, char delimiter, ::std::vector&lt;::std::string &gt; *dest)</argsstring>
        <name>SplitString</name>
        <qualifiedname>testing::internal::SplitString</qualifiedname>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delimiter</declname>
        </param>
        <param>
          <type>::std::vector&lt;::std::string &gt; *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="654" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="1277" bodyend="1292" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="654" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a25a7b3be9ed6341d6541a2516c075b61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NameGenerator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::GenerateNamesRecursively</definition>
        <argsstring>(internal::None, std::vector&lt; std::string &gt; *, int)</argsstring>
        <name>GenerateNamesRecursively</name>
        <qualifiedname>testing::internal::GenerateNamesRecursively</qualifiedname>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1_none" kindref="compound">internal::None</ref></type>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="672" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="672" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1aa4a75b663db15988d84f0b918d3dc167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NameGenerator</type>
          </param>
          <param>
            <type>typename Types</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::GenerateNamesRecursively</definition>
        <argsstring>(Types, std::vector&lt; std::string &gt; *result, int i)</argsstring>
        <name>GenerateNamesRecursively</name>
        <qualifiedname>testing::internal::GenerateNamesRecursively</qualifiedname>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1_types" kindref="compound">Types</ref></type>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="675" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="675" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a6e095b62f67c0b6eb167aae3f070421e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NameGenerator</type>
          </param>
          <param>
            <type>typename Types</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; testing::internal::GenerateNames</definition>
        <argsstring>()</argsstring>
        <name>GenerateNames</name>
        <qualifiedname>testing::internal::GenerateNames</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="682" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="682" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a44068e2445b653e38942227b97990345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::internal::RegisterTypeParameterizedTestSuite</definition>
        <argsstring>(const char *test_suite_name, CodeLocation code_location)</argsstring>
        <name>RegisterTypeParameterizedTestSuite</name>
        <qualifiedname>testing::internal::RegisterTypeParameterizedTestSuite</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>test_suite_name</declname>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1_code_location" kindref="compound">CodeLocation</ref></type>
          <declname>code_location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="578" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="578" bodyend="582" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="745" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a80c3c5429435074f7efd7b56b1251f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::internal::RegisterTypeParameterizedTestSuiteInstantiation</definition>
        <argsstring>(const char *case_name)</argsstring>
        <name>RegisterTypeParameterizedTestSuiteInstantiation</name>
        <qualifiedname>testing::internal::RegisterTypeParameterizedTestSuiteInstantiation</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>case_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="584" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="584" bodyend="587" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="747" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a4b234f8922078deba93158cdbe956bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_ std::string testing::internal::GetCurrentOsStackTraceExceptTop</definition>
        <argsstring>(int skip_count)</argsstring>
        <name>GetCurrentOsStackTraceExceptTop</name>
        <qualifiedname>testing::internal::GetCurrentOsStackTraceExceptTop</qualifiedname>
        <param>
          <type>int</type>
          <declname>skip_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6387" column="1" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6387" bodyend="6391" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="814" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a922c9da63cd4bf94fc473b9ecac76414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::AlwaysTrue</definition>
        <argsstring>()</argsstring>
        <name>AlwaysTrue</name>
        <qualifiedname>testing::internal::AlwaysTrue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6401" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6401" bodyend="6408" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="820" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a4b24c851ab13569b1b15b3d259b60d2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::AlwaysFalse</definition>
        <argsstring>()</argsstring>
        <name>AlwaysFalse</name>
        <qualifiedname>testing::internal::AlwaysFalse</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="823" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="823" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a764748b94f628bdd1dcd39dc81e8b71f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>class Iterator</type>
            <defval>decltype(::std::declval&lt;const C&amp;&gt;().begin())</defval>
          </param>
          <param>
            <type>class</type>
            <defval>decltype(::std::declval&lt;const C&amp;&gt;().end())</defval>
          </param>
          <param>
            <type>class</type>
            <defval>decltype(++::std::declval&lt;Iterator&amp;&gt;())</defval>
          </param>
          <param>
            <type>class</type>
            <defval>decltype(*::std::declval&lt;Iterator&gt;())</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename C::const_iterator</defval>
          </param>
        </templateparamlist>
        <type>IsContainer</type>
        <definition>IsContainer testing::internal::IsContainerTest</definition>
        <argsstring>(int)</argsstring>
        <name>IsContainerTest</name>
        <qualifiedname>testing::internal::IsContainerTest</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="933" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="933" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1af545a2ae928b8a9e7581978234464275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>IsNotContainer</type>
        <definition>IsNotContainer testing::internal::IsContainerTest</definition>
        <argsstring>(long)</argsstring>
        <name>IsContainerTest</name>
        <qualifiedname>testing::internal::IsContainerTest</qualifiedname>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="939" column="16" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="939" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1af4bebf36baf0b0a5b26d051dde55fa47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::ArrayEq</definition>
        <argsstring>(const T *lhs, size_t size, const U *rhs)</argsstring>
        <name>ArrayEq</name>
        <qualifiedname>testing::internal::ArrayEq</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const U *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="1018" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="1018" bodyend="1023" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="1000" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a49b4d0ee49c0f8c93bab29ebd20630cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::ArrayEq</definition>
        <argsstring>(const T &amp;lhs, const U &amp;rhs)</argsstring>
        <name>ArrayEq</name>
        <qualifiedname>testing::internal::ArrayEq</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="1004" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="1004" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a5cb6f81ee827130024261121c742b26c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::ArrayEq</definition>
        <argsstring>(const T(&amp;lhs)[N], const U(&amp;rhs)[N])</argsstring>
        <name>ArrayEq</name>
        <qualifiedname>testing::internal::ArrayEq</qualifiedname>
        <param>
          <type>const T(&amp;)</type>
          <declname>lhs</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const U(&amp;)</type>
          <declname>rhs</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="1010" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="1010" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a94a857fe6ff32cf4fdc4769a4071f239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iter</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>Iter</type>
        <definition>Iter testing::internal::ArrayAwareFind</definition>
        <argsstring>(Iter begin, Iter end, const Element &amp;elem)</argsstring>
        <name>ArrayAwareFind</name>
        <qualifiedname>testing::internal::ArrayAwareFind</qualifiedname>
        <param>
          <type>Iter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Iter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const Element &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="1028" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="1028" bodyend="1033"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1afb1b9728aaaf6d9fe6246a19cfe3f7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::CopyArray</definition>
        <argsstring>(const T *from, size_t size, U *to)</argsstring>
        <name>CopyArray</name>
        <qualifiedname>testing::internal::CopyArray</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>U *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="1058" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="1058" bodyend="1062" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" declline="1040" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a84d0e746ba0827cc52b53d22000de0e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::CopyArray</definition>
        <argsstring>(const T &amp;from, U *to)</argsstring>
        <name>CopyArray</name>
        <qualifiedname>testing::internal::CopyArray</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>U *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="1044" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="1044" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a1e7ae855686720615dcd5754c8181c62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::CopyArray</definition>
        <argsstring>(const T(&amp;from)[N], U(*to)[N])</argsstring>
        <name>CopyArray</name>
        <qualifiedname>testing::internal::CopyArray</qualifiedname>
        <param>
          <type>const T(&amp;)</type>
          <declname>from</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>U(*)</type>
          <declname>to</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="1050" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="1050" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1ac57c9bf3c92c207ba11b83ce05d0359a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_INTERNAL_DEPRECATED</definition>
        <argsstring>(&quot;INSTANTIATE_TEST_CASE_P is deprecated, please use &quot; &quot;INSTANTIATE_TEST_SUITE_P&quot;) const expr bool InstantiateTestCase_P_IsDeprecated()</argsstring>
        <name>GTEST_INTERNAL_DEPRECATED</name>
        <qualifiedname>testing::internal::GTEST_INTERNAL_DEPRECATED</qualifiedname>
        <param>
          <type>&quot;INSTANTIATE_TEST_CASE_P is</type>
          <declname>deprecated</declname>
        </param>
        <param>
          <type>please use &quot; &quot;INSTANTIATE_TEST_SUITE_P&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="1244" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="1244" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1ac2bac410cd8b9ecbc8f4ccc921e61cee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_INTERNAL_DEPRECATED</definition>
        <argsstring>(&quot;TYPED_TEST_CASE_P is deprecated, please use &quot; &quot;TYPED_TEST_SUITE_P&quot;) const expr bool TypedTestCase_P_IsDeprecated()</argsstring>
        <name>GTEST_INTERNAL_DEPRECATED</name>
        <qualifiedname>testing::internal::GTEST_INTERNAL_DEPRECATED</qualifiedname>
        <param>
          <type>&quot;TYPED_TEST_CASE_P is</type>
          <declname>deprecated</declname>
        </param>
        <param>
          <type>please use &quot; &quot;TYPED_TEST_SUITE_P&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="1249" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="1249" bodyend="1252"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1ac7c25a00ce37b8f6c7ea16814233b281" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_INTERNAL_DEPRECATED</definition>
        <argsstring>(&quot;TYPED_TEST_CASE is deprecated, please use &quot; &quot;TYPED_TEST_SUITE&quot;) const expr bool TypedTestCaseIsDeprecated()</argsstring>
        <name>GTEST_INTERNAL_DEPRECATED</name>
        <qualifiedname>testing::internal::GTEST_INTERNAL_DEPRECATED</qualifiedname>
        <param>
          <type>&quot;TYPED_TEST_CASE is</type>
          <declname>deprecated</declname>
        </param>
        <param>
          <type>please use &quot; &quot;TYPED_TEST_SUITE&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="1254" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="1254" bodyend="1257"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1ad10c37bd148fb8988a1d99e127891203" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_INTERNAL_DEPRECATED</definition>
        <argsstring>(&quot;REGISTER_TYPED_TEST_CASE_P is deprecated, please use &quot; &quot;REGISTER_TYPED_TEST_SUITE_P&quot;) const expr bool RegisterTypedTestCase_P_IsDeprecated()</argsstring>
        <name>GTEST_INTERNAL_DEPRECATED</name>
        <qualifiedname>testing::internal::GTEST_INTERNAL_DEPRECATED</qualifiedname>
        <param>
          <type>&quot;REGISTER_TYPED_TEST_CASE_P is</type>
          <declname>deprecated</declname>
        </param>
        <param>
          <type>please use &quot; &quot;REGISTER_TYPED_TEST_SUITE_P&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="1259" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="1259" bodyend="1262"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1ab9dabaaecfb36c469b3382a169a581db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_INTERNAL_DEPRECATED</definition>
        <argsstring>(&quot;INSTANTIATE_TYPED_TEST_CASE_P is deprecated, please use &quot; &quot;INSTANTIATE_TYPED_TEST_SUITE_P&quot;) const expr bool InstantiateTypedTestCase_P_IsDeprecated()</argsstring>
        <name>GTEST_INTERNAL_DEPRECATED</name>
        <qualifiedname>testing::internal::GTEST_INTERNAL_DEPRECATED</qualifiedname>
        <param>
          <type>&quot;INSTANTIATE_TYPED_TEST_CASE_P is</type>
          <declname>deprecated</declname>
        </param>
        <param>
          <type>please use &quot; &quot;INSTANTIATE_TYPED_TEST_SUITE_P&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" line="1264" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-internal.h" bodystart="1264" bodyend="1267"/>
      </memberdef>
      <memberdef kind="function" id="gtest-param-util_8h_1a7c6f19f60d6c255e99348fe8c712d503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::internal::ReportInvalidTestSuiteType</definition>
        <argsstring>(const char *test_suite_name, const CodeLocation &amp;code_location)</argsstring>
        <name>ReportInvalidTestSuiteType</name>
        <qualifiedname>testing::internal::ReportInvalidTestSuiteType</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>test_suite_name</declname>
        </param>
        <param>
          <type>const <ref refid="structtesting_1_1internal_1_1_code_location" kindref="compound">CodeLocation</ref> &amp;</type>
          <declname>code_location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2814" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2814" bodyend="2830" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-param-util.h" declline="88" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-param-util_8h_1a954ec4a8a932dac7743e77e459ffefdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ParamType</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string testing::internal::DefaultParamName</definition>
        <argsstring>(const TestParamInfo&lt; ParamType &gt; &amp;info)</argsstring>
        <name>DefaultParamName</name>
        <qualifiedname>testing::internal::DefaultParamName</qualifiedname>
        <param>
          <type>const <ref refid="structtesting_1_1_test_param_info" kindref="compound">TestParamInfo</ref>&lt; ParamType &gt; &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-param-util.h" line="382" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-param-util.h" bodystart="382" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="gtest-param-util_8h_1aa07a04b597551a51d862911b22a94eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>int</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::TestNotEmpty</definition>
        <argsstring>()</argsstring>
        <name>TestNotEmpty</name>
        <qualifiedname>testing::internal::TestNotEmpty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-param-util.h" line="387" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-param-util.h" bodystart="387" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="gtest-param-util_8h_1ad2f14c6dc7d6c3d78884910943e11bc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
            <defval>int</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::TestNotEmpty</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>TestNotEmpty</name>
        <qualifiedname>testing::internal::TestNotEmpty</qualifiedname>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-param-util.h" line="391" column="6" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-param-util.h" bodystart="391" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="gtest-param-util_8h_1a40954f99c6dca121628c34cc6b9d9196" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::internal::InsertSyntheticTestCase</definition>
        <argsstring>(const std::string &amp;name, CodeLocation location, bool has_test_p)</argsstring>
        <name>InsertSyntheticTestCase</name>
        <qualifiedname>testing::internal::InsertSyntheticTestCase</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1_code_location" kindref="compound">CodeLocation</ref></type>
          <declname>location</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_test_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="533" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="533" bodyend="576" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-param-util.h" declline="494" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a527b9bcc13669b9a16400c8514266254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::IsTrue</definition>
        <argsstring>(bool condition)</argsstring>
        <name>IsTrue</name>
        <qualifiedname>testing::internal::IsTrue</qualifiedname>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6399" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6399" bodyend="6399" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="971" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a31b7c3abed4a7c395f42c61e993989f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_::std::string</type>
        <definition>GTEST_API_::std::string testing::internal::FormatFileLocation</definition>
        <argsstring>(const char *file, int line)</argsstring>
        <name>FormatFileLocation</name>
        <qualifiedname>testing::internal::FormatFileLocation</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-port.cc" line="1003" column="26" bodyfile="build/_deps/googletest-src/googletest/src/gtest-port.cc" bodystart="1003" bodyend="1014" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="1056" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a1ee4cde97868c53e442d3182496a9f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_::std::string</type>
        <definition>GTEST_API_::std::string testing::internal::FormatCompilerIndependentFileLocation</definition>
        <argsstring>(const char *file, int line)</argsstring>
        <name>FormatCompilerIndependentFileLocation</name>
        <qualifiedname>testing::internal::FormatCompilerIndependentFileLocation</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-port.cc" line="1021" column="26" bodyfile="build/_deps/googletest-src/googletest/src/gtest-port.cc" bodystart="1021" bodyend="1029" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="1061" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a06b1b20029fbd1dbeb59752f914fab84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::LogToStderr</definition>
        <argsstring>()</argsstring>
        <name>LogToStderr</name>
        <qualifiedname>testing::internal::LogToStderr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1098" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1098" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a2135f223bf6b527729aeaa651115183b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::FlushInfoLog</definition>
        <argsstring>()</argsstring>
        <name>FlushInfoLog</name>
        <qualifiedname>testing::internal::FlushInfoLog</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1099" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1099" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a982df3f369643b175f79cda4048bc3b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_to" kindref="compound">To</ref></type>
        <definition>To testing::internal::ImplicitCast_</definition>
        <argsstring>(To x)</argsstring>
        <name>ImplicitCast_</name>
        <qualifiedname>testing::internal::ImplicitCast_</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_to" kindref="compound">To</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1180" column="11" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1180" bodyend="1182"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1af54f5cf4d9e03836ecc0316d090cb4ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Derived</type>
          </param>
          <param>
            <type>class <ref refid="class_base" kindref="compound">Base</ref></type>
          </param>
        </templateparamlist>
        <type>Derived *</type>
        <definition>Derived * testing::internal::CheckedDowncastToActualType</definition>
        <argsstring>(Base *base)</argsstring>
        <name>CheckedDowncastToActualType</name>
        <qualifiedname>testing::internal::CheckedDowncastToActualType</qualifiedname>
        <param>
          <type><ref refid="class_base" kindref="compound">Base</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1190" column="9" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1190" bodyend="1197"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1acba06d4f0343dec407738ba5544af990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::CaptureStdout</definition>
        <argsstring>()</argsstring>
        <name>CaptureStdout</name>
        <qualifiedname>testing::internal::CaptureStdout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1207" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="1207" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1aed657219a9856a8d249a3230de0c54ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>GTEST_API_ std::string testing::internal::GetCapturedStdout</definition>
        <argsstring>()</argsstring>
        <name>GetCapturedStdout</name>
        <qualifiedname>testing::internal::GetCapturedStdout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1208" column="24" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="1208" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a8ec00d458d0d442bd64af7b5f9c22dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::CaptureStderr</definition>
        <argsstring>()</argsstring>
        <name>CaptureStderr</name>
        <qualifiedname>testing::internal::CaptureStderr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1209" column="17" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="1209" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a374156401da17704099d0c33fa53adfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>GTEST_API_ std::string testing::internal::GetCapturedStderr</definition>
        <argsstring>()</argsstring>
        <name>GetCapturedStderr</name>
        <qualifiedname>testing::internal::GetCapturedStderr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1210" column="24" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="1210" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a06ca3f65f5e85c9ce7299b9e4cd52408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ size_t</type>
        <definition>size_t testing::internal::GetFileSize</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>GetFileSize</name>
        <qualifiedname>testing::internal::GetFileSize</qualifiedname>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-port.cc" line="1242" column="8" bodyfile="build/_deps/googletest-src/googletest/src/gtest-port.cc" bodystart="1242" bodyend="1245" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="1214" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a2cc0be60c54a8701423fe5297e1349ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::ReadEntireFile</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>ReadEntireFile</name>
        <qualifiedname>testing::internal::ReadEntireFile</qualifiedname>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-port.cc" line="1247" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest-port.cc" bodystart="1247" bodyend="1268" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="1217" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a9608256c67f889006be44912e57e3d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; testing::internal::GetArgvs</definition>
        <argsstring>()</argsstring>
        <name>GetArgvs</name>
        <qualifiedname>testing::internal::GetArgvs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="647" column="15" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="647" bodyend="656" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="1220" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a3b9b3649cd04558bf46c75de52a7ef34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ size_t</type>
        <definition>size_t testing::internal::GetThreadCount</definition>
        <argsstring>()</argsstring>
        <name>GetThreadCount</name>
        <qualifiedname>testing::internal::GetThreadCount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-port.cc" line="265" column="8" bodyfile="build/_deps/googletest-src/googletest/src/gtest-port.cc" bodystart="265" bodyend="269" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="1952" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1aeb957087fd6bbf9db98ab7cd41b0c129" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsAlpha</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsAlpha</name>
        <qualifiedname>testing::internal::IsAlpha</qualifiedname>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1969" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1969" bodyend="1971"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a83802e7f23324cd512232203662e1a98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsAlNum</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsAlNum</name>
        <qualifiedname>testing::internal::IsAlNum</qualifiedname>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1972" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1972" bodyend="1974"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a4bd96b7fa6486802d33ddc217af55a39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsDigit</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsDigit</name>
        <qualifiedname>testing::internal::IsDigit</qualifiedname>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1975" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1975" bodyend="1977"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1ac26ce3883bc8919c27074975e958f3b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsLower</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsLower</name>
        <qualifiedname>testing::internal::IsLower</qualifiedname>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1978" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1978" bodyend="1980"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1af429e04f70f9c10f6aa76a5d1ccd389f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsSpace</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsSpace</name>
        <qualifiedname>testing::internal::IsSpace</qualifiedname>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1981" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1981" bodyend="1983"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a84f3baa379fec6bf5947cb5165aa8cc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsUpper</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsUpper</name>
        <qualifiedname>testing::internal::IsUpper</qualifiedname>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1984" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1984" bodyend="1986"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1aa234ef141278263fb143b616c74c86e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsXDigit</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsXDigit</name>
        <qualifiedname>testing::internal::IsXDigit</qualifiedname>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1987" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1987" bodyend="1989"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1adfc1d541600d0677e63587ab20734c88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsXDigit</definition>
        <argsstring>(char16_t ch)</argsstring>
        <name>IsXDigit</name>
        <qualifiedname>testing::internal::IsXDigit</qualifiedname>
        <param>
          <type>char16_t</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1995" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1995" bodyend="1998"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a8d1269239eab81c9c48d6bc75b45dfa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsXDigit</definition>
        <argsstring>(char32_t ch)</argsstring>
        <name>IsXDigit</name>
        <qualifiedname>testing::internal::IsXDigit</qualifiedname>
        <param>
          <type>char32_t</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="1999" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="1999" bodyend="2002"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a6ab68a30f8291c09b2289c132bbe3b16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsXDigit</definition>
        <argsstring>(wchar_t ch)</argsstring>
        <name>IsXDigit</name>
        <qualifiedname>testing::internal::IsXDigit</qualifiedname>
        <param>
          <type>wchar_t</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2003" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2003" bodyend="2006"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1ad9c627ef2a94245e3fd69e7ab3d49b42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char</type>
        <definition>char testing::internal::ToLower</definition>
        <argsstring>(char ch)</argsstring>
        <name>ToLower</name>
        <qualifiedname>testing::internal::ToLower</qualifiedname>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2008" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2008" bodyend="2010"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1ac1b876a8133895bd553d4780ecaa1e3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char</type>
        <definition>char testing::internal::ToUpper</definition>
        <argsstring>(char ch)</argsstring>
        <name>ToUpper</name>
        <qualifiedname>testing::internal::ToUpper</qualifiedname>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2011" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2011" bodyend="2013"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1aa6afda12e567c353e2e9b9c2e8cae14f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string testing::internal::StripTrailingSpaces</definition>
        <argsstring>(std::string str)</argsstring>
        <name>StripTrailingSpaces</name>
        <qualifiedname>testing::internal::StripTrailingSpaces</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" line="2015" column="20" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" bodystart="2015" bodyend="2019"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a4d891c6743bbc5c44b6ce06d7417926c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::ParseInt32</definition>
        <argsstring>(const Message &amp;src_text, const char *str, int32_t *value)</argsstring>
        <name>ParseInt32</name>
        <qualifiedname>testing::internal::ParseInt32</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>src_text</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-port.cc" line="1324" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-port.cc" bodystart="1324" bodyend="1360" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="2357" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a67132cdce23fb71b6c38ee34ef81eb4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::BoolFromGTestEnv</definition>
        <argsstring>(const char *flag, bool default_val)</argsstring>
        <name>BoolFromGTestEnv</name>
        <qualifiedname>testing::internal::BoolFromGTestEnv</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-port.cc" line="1366" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-port.cc" bodystart="1366" bodyend="1375" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="2362" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1abc29596f55cd8044782da822d2358e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ int32_t</type>
        <definition>int32_t testing::internal::Int32FromGTestEnv</definition>
        <argsstring>(const char *flag, int32_t default_val)</argsstring>
        <name>Int32FromGTestEnv</name>
        <qualifiedname>testing::internal::Int32FromGTestEnv</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-port.cc" line="1380" column="9" bodyfile="build/_deps/googletest-src/googletest/src/gtest-port.cc" bodystart="1380" bodyend="1402" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="2363" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a0c793c6d84760d900299916c077a1af4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string testing::internal::OutputFlagAlsoCheckEnvVar</definition>
        <argsstring>()</argsstring>
        <name>OutputFlagAlsoCheckEnvVar</name>
        <qualifiedname>testing::internal::OutputFlagAlsoCheckEnvVar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-port.cc" line="1412" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest-port.cc" bodystart="1412" bodyend="1419" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="2364" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a7ed785df46a339403b0f749d3a879201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * testing::internal::StringFromGTestEnv</definition>
        <argsstring>(const char *flag, const char *default_val)</argsstring>
        <name>StringFromGTestEnv</name>
        <qualifiedname>testing::internal::StringFromGTestEnv</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-port.cc" line="1423" column="12" bodyfile="build/_deps/googletest-src/googletest/src/gtest-port.cc" bodystart="1423" bodyend="1431" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-port.h" declline="2365" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="gtest-string_8h_1ac0a2b7f69fc829d80a39e925b6417e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::StringStreamToString</definition>
        <argsstring>(::std::stringstream *stream)</argsstring>
        <name>StringStreamToString</name>
        <qualifiedname>testing::internal::StringStreamToString</qualifiedname>
        <param>
          <type>::std::stringstream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2257" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2257" bodyend="2273" declfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-string.h" declline="173" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gtest-type-util_8h_1a5342e843f087081705094beae07b557b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string testing::internal::CanonicalizeForStdLibVersioning</definition>
        <argsstring>(std::string s)</argsstring>
        <name>CanonicalizeForStdLibVersioning</name>
        <qualifiedname>testing::internal::CanonicalizeForStdLibVersioning</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-type-util.h" line="61" column="20" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-type-util.h" bodystart="61" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="gtest-type-util_8h_1a635606b4731f843c86ec8ca51cab83a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string testing::internal::GetTypeName</definition>
        <argsstring>()</argsstring>
        <name>GetTypeName</name>
        <qualifiedname>testing::internal::GetTypeName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-type-util.h" line="129" column="13" bodyfile="build/_deps/googletest-src/googletest/include/gtest/internal/gtest-type-util.h" bodystart="129" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1ae66b46943a429e6efb1db456d4cae90c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ TimeInMillis</type>
        <definition>TimeInMillis testing::internal::GetTimeInMillis</definition>
        <argsstring>()</argsstring>
        <name>GetTimeInMillis</name>
        <qualifiedname>testing::internal::GetTimeInMillis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="1200" column="14" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="1200" bodyend="1205" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="91" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1ac1db1b4603967a6c4404f31cbbac31a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::ShouldUseColor</definition>
        <argsstring>(bool stdout_is_tty)</argsstring>
        <name>ShouldUseColor</name>
        <qualifiedname>testing::internal::ShouldUseColor</qualifiedname>
        <param>
          <type>bool</type>
          <declname>stdout_is_tty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="3275" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="3275" bodyend="3309" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="94" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1aa61da90c04dfdef06183c11a6fa6669e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>GTEST_API_ std::string testing::internal::FormatTimeInMillisAsSeconds</definition>
        <argsstring>(TimeInMillis ms)</argsstring>
        <name>FormatTimeInMillisAsSeconds</name>
        <qualifiedname>testing::internal::FormatTimeInMillisAsSeconds</qualifiedname>
        <param>
          <type>TimeInMillis</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="98" column="24" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="98" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1ac03d4a92508783ce807a8f4ec74e5b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>GTEST_API_ std::string testing::internal::FormatEpochTimeInMillisAsIso8601</definition>
        <argsstring>(TimeInMillis ms)</argsstring>
        <name>FormatEpochTimeInMillisAsIso8601</name>
        <qualifiedname>testing::internal::FormatEpochTimeInMillisAsIso8601</qualifiedname>
        <param>
          <type>TimeInMillis</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="104" column="24" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="104" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a7cbe05205de4dec33f171586914023a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::ParseFlag</definition>
        <argsstring>(const char *str, const char *flag, int32_t *value)</argsstring>
        <name>ParseFlag</name>
        <qualifiedname>testing::internal::ParseFlag</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6481" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6481" bodyend="6491" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="110" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a1b1e98d2e659f313d40e17cc66ae7193" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int testing::internal::GetRandomSeedFromFlag</definition>
        <argsstring>(int32_t random_seed_flag)</argsstring>
        <name>GetRandomSeedFromFlag</name>
        <qualifiedname>testing::internal::GetRandomSeedFromFlag</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>random_seed_flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="114" column="12" bodyfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" bodystart="114" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a6e07a655cb987d131cd8fbeba9a7f1eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int testing::internal::GetNextRandomSeed</definition>
        <argsstring>(int seed)</argsstring>
        <name>GetNextRandomSeed</name>
        <qualifiedname>testing::internal::GetNextRandomSeed</qualifiedname>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="131" column="12" bodyfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" bodystart="131" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1ad167126ddcf04ef8d8784b2a7ed2fe04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::CodePointToUtf8</definition>
        <argsstring>(uint32_t code_point)</argsstring>
        <name>CodePointToUtf8</name>
        <qualifiedname>testing::internal::CodePointToUtf8</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>code_point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2030" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2030" bodyend="2056" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="226" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a05b8c86ff38243f34d8f839a0eadefb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::WideStringToUtf8</definition>
        <argsstring>(const wchar_t *str, int num_chars)</argsstring>
        <name>WideStringToUtf8</name>
        <qualifiedname>testing::internal::WideStringToUtf8</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_chars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2097" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2097" bodyend="2117" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="241" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a19b35b39782d41e6ef76e1910a3a502e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::WriteToShardStatusFileIfNeeded</definition>
        <argsstring>()</argsstring>
        <name>WriteToShardStatusFileIfNeeded</name>
        <qualifiedname>testing::internal::WriteToShardStatusFileIfNeeded</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="247" column="6" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="247" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a0fe41657b1d1ab7ec4e37ec07403ee6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::ShouldShard</definition>
        <argsstring>(const char *total_shards_str, const char *shard_index_str, bool in_subprocess_for_death_test)</argsstring>
        <name>ShouldShard</name>
        <qualifiedname>testing::internal::ShouldShard</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>total_shards_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>shard_index_str</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>in_subprocess_for_death_test</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6107" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6107" bodyend="6146" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="255" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1aa4429a43615dd8c575e1456a30844af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ int32_t</type>
        <definition>int32_t testing::internal::Int32FromEnvOrDie</definition>
        <argsstring>(const char *env_var, int32_t default_val)</argsstring>
        <name>Int32FromEnvOrDie</name>
        <qualifiedname>testing::internal::Int32FromEnvOrDie</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>env_var</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6151" column="9" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6151" bodyend="6163" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="262" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a437bd89f5bc532778d7467600e210395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::ShouldRunTestOnShard</definition>
        <argsstring>(int total_shards, int shard_index, int test_id)</argsstring>
        <name>ShouldRunTestOnShard</name>
        <qualifiedname>testing::internal::ShouldRunTestOnShard</qualifiedname>
        <param>
          <type>int</type>
          <declname>total_shards</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shard_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>test_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6169" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6169" bodyend="6171" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="268" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a1e77a774d910346eff11a86d8df783a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>typename Predicate</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int testing::internal::CountIf</definition>
        <argsstring>(const Container &amp;c, Predicate predicate)</argsstring>
        <name>CountIf</name>
        <qualifiedname>testing::internal::CountIf</qualifiedname>
        <param>
          <type>const Container &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Predicate</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="276" column="12" bodyfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" bodystart="276" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a52f5504ed65d116201ccb8f99a44fd7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::ForEach</definition>
        <argsstring>(const Container &amp;c, Functor functor)</argsstring>
        <name>ForEach</name>
        <qualifiedname>testing::internal::ForEach</qualifiedname>
        <param>
          <type>const Container &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Functor</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="288" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" bodystart="288" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a71fdd20a0686bea3dc0cdcd95e0bca1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>E</type>
        <definition>E testing::internal::GetElementOr</definition>
        <argsstring>(const std::vector&lt; E &gt; &amp;v, int i, E default_value)</argsstring>
        <name>GetElementOr</name>
        <qualifiedname>testing::internal::GetElementOr</qualifiedname>
        <param>
          <type>const std::vector&lt; E &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>E</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="295" column="10" bodyfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a0e1d3dc36138a591769412d4c7779861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::ShuffleRange</definition>
        <argsstring>(internal::Random *random, int begin, int end, std::vector&lt; E &gt; *v)</argsstring>
        <name>ShuffleRange</name>
        <qualifiedname>testing::internal::ShuffleRange</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_random" kindref="compound">internal::Random</ref> *</type>
          <declname>random</declname>
        </param>
        <param>
          <type>int</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>std::vector&lt; E &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="305" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" bodystart="305" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a90d9e6ffe8522a7eb1b2ce9b1a0c4673" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::Shuffle</definition>
        <argsstring>(internal::Random *random, std::vector&lt; E &gt; *v)</argsstring>
        <name>Shuffle</name>
        <qualifiedname>testing::internal::Shuffle</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_random" kindref="compound">internal::Random</ref> *</type>
          <declname>random</declname>
        </param>
        <param>
          <type>std::vector&lt; E &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="329" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" bodystart="329" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a1e7045e09392aece10aea4517458b7ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void testing::internal::Delete</definition>
        <argsstring>(T *x)</argsstring>
        <name>Delete</name>
        <qualifiedname>testing::internal::Delete</qualifiedname>
        <param>
          <type>T *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" line="336" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" bodystart="336" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a472880afbcc592a41e3d623e2dec8412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::internal::ParseGoogleTestFlagsOnly</definition>
        <argsstring>(int *argc, char **argv)</argsstring>
        <name>ParseGoogleTestFlagsOnly</name>
        <qualifiedname>testing::internal::ParseGoogleTestFlagsOnly</qualifiedname>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6774" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6774" bodyend="6837" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="1005" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1aa3c81a67914856448d0778990d9d9cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::internal::ParseGoogleTestFlagsOnly</definition>
        <argsstring>(int *argc, wchar_t **argv)</argsstring>
        <name>ParseGoogleTestFlagsOnly</name>
        <qualifiedname>testing::internal::ParseGoogleTestFlagsOnly</qualifiedname>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>wchar_t **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6838" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6838" bodyend="6840" declfile="build/_deps/googletest-src/googletest/src/gtest-internal-inl.h" declline="1006" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8cc_1a7540386ecf74d7ab7e2fa6089db94682" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string testing::internal::FlagToEnvVar</definition>
        <argsstring>(const char *flag)</argsstring>
        <name>FlagToEnvVar</name>
        <qualifiedname>testing::internal::FlagToEnvVar</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-port.cc" line="1309" column="20" bodyfile="build/_deps/googletest-src/googletest/src/gtest-port.cc" bodystart="1309" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a52d18c9d995e8b3a3cb77cc83d7bbc68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintBytesInObjectTo</definition>
        <argsstring>(const unsigned char *obj_bytes, size_t count, ostream *os)</argsstring>
        <name>PrintBytesInObjectTo</name>
        <qualifiedname>testing::internal::PrintBytesInObjectTo</qualifiedname>
        <param>
          <type>const unsigned char *</type>
          <declname>obj_bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="130" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a015a6ee397bad1b5496d50790bbd67b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsPrintableAscii</definition>
        <argsstring>(char32_t c)</argsstring>
        <name>IsPrintableAscii</name>
        <qualifiedname>testing::internal::IsPrintableAscii</qualifiedname>
        <param>
          <type>char32_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="145" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a493c0416192a167ab34edc9654620d50" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>CharFormat</type>
        <definition>static CharFormat testing::internal::PrintAsCharLiteralTo</definition>
        <argsstring>(Char c, ostream *os)</argsstring>
        <name>PrintAsCharLiteralTo</name>
        <qualifiedname>testing::internal::PrintAsCharLiteralTo</qualifiedname>
        <param>
          <type>Char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="151" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="151" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1abe42471e5d3d8c350849320057b388db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CharFormat</type>
        <definition>static CharFormat testing::internal::PrintAsStringLiteralTo</definition>
        <argsstring>(char32_t c, ostream *os)</argsstring>
        <name>PrintAsStringLiteralTo</name>
        <qualifiedname>testing::internal::PrintAsStringLiteralTo</qualifiedname>
        <param>
          <type>char32_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="200" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="200" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1ad14085fef9f0373650cd9e09a2d7056d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * testing::internal::GetCharWidthPrefix</definition>
        <argsstring>(char)</argsstring>
        <name>GetCharWidthPrefix</name>
        <qualifiedname>testing::internal::GetCharWidthPrefix</qualifiedname>
        <param>
          <type>char</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="213" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="213" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a375272cbe823159ac605b931d9667ec8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * testing::internal::GetCharWidthPrefix</definition>
        <argsstring>(signed char)</argsstring>
        <name>GetCharWidthPrefix</name>
        <qualifiedname>testing::internal::GetCharWidthPrefix</qualifiedname>
        <param>
          <type>signed char</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="215" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="215" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a14b3a6f13558b1589ed9a2367b3913c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * testing::internal::GetCharWidthPrefix</definition>
        <argsstring>(unsigned char)</argsstring>
        <name>GetCharWidthPrefix</name>
        <qualifiedname>testing::internal::GetCharWidthPrefix</qualifiedname>
        <param>
          <type>unsigned char</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="217" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a26b462f6f95320101d8ca0d0bb9acfc5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * testing::internal::GetCharWidthPrefix</definition>
        <argsstring>(char16_t)</argsstring>
        <name>GetCharWidthPrefix</name>
        <qualifiedname>testing::internal::GetCharWidthPrefix</qualifiedname>
        <param>
          <type>char16_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="223" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a2d28e6750ac5f9455ecdaf344b2b3299" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * testing::internal::GetCharWidthPrefix</definition>
        <argsstring>(char32_t)</argsstring>
        <name>GetCharWidthPrefix</name>
        <qualifiedname>testing::internal::GetCharWidthPrefix</qualifiedname>
        <param>
          <type>char32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="225" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a950b1f163b7cb56a6c7867e7e9351938" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * testing::internal::GetCharWidthPrefix</definition>
        <argsstring>(wchar_t)</argsstring>
        <name>GetCharWidthPrefix</name>
        <qualifiedname>testing::internal::GetCharWidthPrefix</qualifiedname>
        <param>
          <type>wchar_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="227" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="227" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a82e5b3cf45fd9c4603dbe14bc4cb38c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CharFormat</type>
        <definition>static CharFormat testing::internal::PrintAsStringLiteralTo</definition>
        <argsstring>(char c, ostream *os)</argsstring>
        <name>PrintAsStringLiteralTo</name>
        <qualifiedname>testing::internal::PrintAsStringLiteralTo</qualifiedname>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="231" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="231" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1ae3d2943c6c8191a2b1dbe44b5d6582fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CharFormat</type>
        <definition>static CharFormat testing::internal::PrintAsStringLiteralTo</definition>
        <argsstring>(char16_t c, ostream *os)</argsstring>
        <name>PrintAsStringLiteralTo</name>
        <qualifiedname>testing::internal::PrintAsStringLiteralTo</qualifiedname>
        <param>
          <type>char16_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="241" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a8c5838995d7bb9e4232b69e6bcdb9ab8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CharFormat</type>
        <definition>static CharFormat testing::internal::PrintAsStringLiteralTo</definition>
        <argsstring>(wchar_t c, ostream *os)</argsstring>
        <name>PrintAsStringLiteralTo</name>
        <qualifiedname>testing::internal::PrintAsStringLiteralTo</qualifiedname>
        <param>
          <type>wchar_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="245" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="245" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1ae309e29fd7a2218b8f03b2a66d1149cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintCharAndCodeTo</definition>
        <argsstring>(Char c, ostream *os)</argsstring>
        <name>PrintCharAndCodeTo</name>
        <qualifiedname>testing::internal::PrintCharAndCodeTo</qualifiedname>
        <param>
          <type>Char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="253" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="253" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1aa74ea9d64f76ce69eceb225ca5ebef58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(wchar_t wc, ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>wchar_t</type>
          <declname>wc</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="281" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1aa85ad5fc870841fdccb8f2a373628521" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_ static GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ CharFormat</type>
        <definition>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_ static GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ CharFormat testing::internal::PrintCharsAsStringTo</definition>
        <argsstring>(const CharType *begin, size_t len, ostream *os)</argsstring>
        <name>PrintCharsAsStringTo</name>
        <qualifiedname>testing::internal::PrintCharsAsStringTo</qualifiedname>
        <param>
          <type>const CharType *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="342" column="9" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="342" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a369a76d3f473ed383eb76b76cbac24ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_ static GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ void</type>
        <definition>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_ static GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ void testing::internal::UniversalPrintCharArray</definition>
        <argsstring>(const CharType *begin, size_t len, ostream *os)</argsstring>
        <name>UniversalPrintCharArray</name>
        <qualifiedname>testing::internal::UniversalPrintCharArray</qualifiedname>
        <param>
          <type>const CharType *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="371" column="9" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="371" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a070107e7a8205ad6ec4d538d52b15b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const char *begin, size_t len, ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <qualifiedname>testing::internal::UniversalPrintArray</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="394" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="394" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1aebe5db97cc05310ee31c2b2c16bd4485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const char16_t *begin, size_t len, ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <qualifiedname>testing::internal::UniversalPrintArray</qualifiedname>
        <param>
          <type>const char16_t *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="408" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="408" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a1858d4aac7d0eb32c19e4bdff14a2864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const char32_t *begin, size_t len, ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <qualifiedname>testing::internal::UniversalPrintArray</qualifiedname>
        <param>
          <type>const char32_t *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="414" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="414" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a52394019018eb5079f9f1bcca23dcd60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const wchar_t *begin, size_t len, ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <qualifiedname>testing::internal::UniversalPrintArray</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="420" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="420" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1adc6c98306d40b53fd07be4e295102a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const char *s, ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="439" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="439" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1ad0bc07b66792a391c6753cfb1a43a08c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const char16_t *s, ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const char16_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="445" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="445" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a8814e076fa3e05dbdacba89b69a65e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const char32_t *s, ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const char32_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="447" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="447" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1afc20fb56b2547a8f91f9ff99650f2024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const wchar_t *s, ostream *os)</argsstring>
        <name>PrintTo</name>
        <qualifiedname>testing::internal::PrintTo</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="457" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="457" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1ad609167d8d6792b0fb186539e0e159bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintStringTo</definition>
        <argsstring>(const ::std::string &amp;s, ostream *os)</argsstring>
        <name>PrintStringTo</name>
        <qualifiedname>testing::internal::PrintStringTo</qualifiedname>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="525" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="525" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a07ad0fc028c84e42db25649d7ad304f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintU16StringTo</definition>
        <argsstring>(const ::std::u16string &amp;s, ostream *os)</argsstring>
        <name>PrintU16StringTo</name>
        <qualifiedname>testing::internal::PrintU16StringTo</qualifiedname>
        <param>
          <type>const ::std::u16string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="539" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="539" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1afc0094a7e0fcb9f63a1f2b6c2ef4f585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintU32StringTo</definition>
        <argsstring>(const ::std::u32string &amp;s, ostream *os)</argsstring>
        <name>PrintU32StringTo</name>
        <qualifiedname>testing::internal::PrintU32StringTo</qualifiedname>
        <param>
          <type>const ::std::u32string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-printers.cc" line="543" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest-printers.cc" bodystart="543" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test_8cc_1aebbf00937c4cb663239baeb39006bd8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * testing::internal::SkipSpaces</definition>
        <argsstring>(const char *str)</argsstring>
        <name>SkipSpaces</name>
        <qualifiedname>testing::internal::SkipSpaces</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-typed-test.cc" line="43" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest-typed-test.cc" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="gtest-typed-test_8cc_1ab14370eaf6b801a2ef4be086a936c33b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt; std::string &gt; testing::internal::SplitIntoTestNames</definition>
        <argsstring>(const char *src)</argsstring>
        <name>SplitIntoTestNames</name>
        <qualifiedname>testing::internal::SplitIntoTestNames</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest-typed-test.cc" line="48" column="20" bodyfile="build/_deps/googletest-src/googletest/src/gtest-typed-test.cc" bodystart="48" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a91e707e0d371fae0224ffd37f0d042af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::GTestIsInitialized</definition>
        <argsstring>()</argsstring>
        <name>GTestIsInitialized</name>
        <qualifiedname>testing::internal::GTestIsInitialized</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="424" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="424" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a9ba01fa896ccd7339cbe7d3c76ac22e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int testing::internal::SumOverTestSuiteList</definition>
        <argsstring>(const std::vector&lt; TestSuite * &gt; &amp;case_list, int(TestSuite::*method)() const)</argsstring>
        <name>SumOverTestSuiteList</name>
        <qualifiedname>testing::internal::SumOverTestSuiteList</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classtesting_1_1_test_suite" kindref="compound">TestSuite</ref> * &gt; &amp;</type>
          <declname>case_list</declname>
        </param>
        <param>
          <type>int(TestSuite::*)() const</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="429" column="12" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="429" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a2657ed70176475ac11ae3d62d25e9a63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::TestSuitePassed</definition>
        <argsstring>(const TestSuite *test_suite)</argsstring>
        <name>TestSuitePassed</name>
        <qualifiedname>testing::internal::TestSuitePassed</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1_test_suite" kindref="compound">TestSuite</ref> *</type>
          <declname>test_suite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="439" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="439" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ac42b0c3929b5719f55c9be85ce8c28e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::TestSuiteFailed</definition>
        <argsstring>(const TestSuite *test_suite)</argsstring>
        <name>TestSuiteFailed</name>
        <qualifiedname>testing::internal::TestSuiteFailed</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1_test_suite" kindref="compound">TestSuite</ref> *</type>
          <declname>test_suite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="444" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="444" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1abd3f6249dd7872c7b39cd935e2db50d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::ShouldRunTestSuite</definition>
        <argsstring>(const TestSuite *test_suite)</argsstring>
        <name>ShouldRunTestSuite</name>
        <qualifiedname>testing::internal::ShouldRunTestSuite</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1_test_suite" kindref="compound">TestSuite</ref> *</type>
          <declname>test_suite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="450" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="450" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a107939f231b8e7ae27f1b1f819325abc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::PatternMatchesString</definition>
        <argsstring>(const std::string &amp;name_str, const char *pattern, const char *pattern_end)</argsstring>
        <name>PatternMatchesString</name>
        <qualifiedname>testing::internal::PatternMatchesString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pattern_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="729" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="729" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a4b5402183b934804ccaf61a4708f8e62" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>static AssertionResult testing::internal::HasOneFailure</definition>
        <argsstring>(const char *, const char *, const char *, const TestPartResultArray &amp;results, TestPartResult::Type type, const std::string &amp;substr)</argsstring>
        <name>HasOneFailure</name>
        <qualifiedname>testing::internal::HasOneFailure</qualifiedname>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const TestPartResultArray &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>TestPartResult::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>substr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="997" column="24" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="997" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a8eb8eddf760375a490e007b20777ec56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::SplitString</definition>
        <argsstring>(const ::std::string &amp;str, char delimiter, ::std::vector&lt; ::std::string &gt; *dest)</argsstring>
        <name>SplitString</name>
        <qualifiedname>testing::internal::SplitString</qualifiedname>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delimiter</declname>
        </param>
        <param>
          <type>::std::vector&lt; ::std::string &gt; *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="1277" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="1277" bodyend="1292"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a17b52b6b1f81f6dcad5cc4d12e5173a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RawType</type>
          </param>
        </templateparamlist>
        <type>AssertionResult</type>
        <definition>AssertionResult testing::internal::FloatingPointLE</definition>
        <argsstring>(const char *expr1, const char *expr2, RawType val1, RawType val2)</argsstring>
        <name>FloatingPointLE</name>
        <qualifiedname>testing::internal::FloatingPointLE</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>RawType</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>RawType</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="1720" column="17" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="1720" bodyend="1749"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1affc24de4ea3502e1ca01a2ef3347b8a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t testing::internal::ChopLowBits</definition>
        <argsstring>(uint32_t *bits, int n)</argsstring>
        <name>ChopLowBits</name>
        <qualifiedname>testing::internal::ChopLowBits</qualifiedname>
        <param>
          <type>uint32_t *</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2018" column="17" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2018" bodyend="2022"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a681895f8cc32286211be9889da107394" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsUtf16SurrogatePair</definition>
        <argsstring>(wchar_t first, wchar_t second)</argsstring>
        <name>IsUtf16SurrogatePair</name>
        <qualifiedname>testing::internal::IsUtf16SurrogatePair</qualifiedname>
        <param>
          <type>wchar_t</type>
          <declname>first</declname>
        </param>
        <param>
          <type>wchar_t</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2065" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2065" bodyend="2068"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a67fa84bf2b2ff208b29a49d635d41332" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t testing::internal::CreateCodePointFromUtf16SurrogatePair</definition>
        <argsstring>(wchar_t first, wchar_t second)</argsstring>
        <name>CreateCodePointFromUtf16SurrogatePair</name>
        <qualifiedname>testing::internal::CreateCodePointFromUtf16SurrogatePair</qualifiedname>
        <param>
          <type>wchar_t</type>
          <declname>first</declname>
        </param>
        <param>
          <type>wchar_t</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2071" column="17" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2071" bodyend="2082"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ac5293b438139ef7ed05cb7fcaaf63545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename Result</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Result</ref></type>
        <definition>Result testing::internal::HandleSehExceptionsInMethodIfSupported</definition>
        <argsstring>(T *object, Result(T::*method)(), const char *location)</argsstring>
        <name>HandleSehExceptionsInMethodIfSupported</name>
        <qualifiedname>testing::internal::HandleSehExceptionsInMethodIfSupported</qualifiedname>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Result</ref>(T::*)()</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2642" column="8" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2642" bodyend="2655"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1addb2ed165b92b74e25fe9ebe9e46b9f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename Result</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Result</ref></type>
        <definition>Result testing::internal::HandleExceptionsInMethodIfSupported</definition>
        <argsstring>(T *object, Result(T::*method)(), const char *location)</argsstring>
        <name>HandleExceptionsInMethodIfSupported</name>
        <qualifiedname>testing::internal::HandleExceptionsInMethodIfSupported</qualifiedname>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Result</ref>(T::*)()</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="2661" column="8" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="2661" bodyend="2713"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ada13cbf91139f0809a5a31ea2594c1ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string testing::internal::PrintTestPartResultToString</definition>
        <argsstring>(const TestPartResult &amp;test_part_result)</argsstring>
        <name>PrintTestPartResultToString</name>
        <qualifiedname>testing::internal::PrintTestPartResultToString</qualifiedname>
        <param>
          <type>const TestPartResult &amp;</type>
          <declname>test_part_result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="3175" column="20" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="3175" bodyend="3184"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ac844b3d05dd6f665f72e2a1cec1872ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::PrintTestPartResult</definition>
        <argsstring>(const TestPartResult &amp;test_part_result)</argsstring>
        <name>PrintTestPartResult</name>
        <qualifiedname>testing::internal::PrintTestPartResult</qualifiedname>
        <param>
          <type>const TestPartResult &amp;</type>
          <declname>test_part_result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="3187" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="3187" bodyend="3202"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1af5e80b70074337a8dd77e5ad3e8b4d24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * testing::internal::GetAnsiColorCode</definition>
        <argsstring>(GTestColor color)</argsstring>
        <name>GetAnsiColorCode</name>
        <qualifiedname>testing::internal::GetAnsiColorCode</qualifiedname>
        <param>
          <type>GTestColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="3258" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="3258" bodyend="3270"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a1d9493ff218e622051c53094eb54bcd6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::ColoredPrintf</definition>
        <argsstring>(GTestColor color, const char *fmt,...)</argsstring>
        <name>ColoredPrintf</name>
        <qualifiedname>testing::internal::ColoredPrintf</qualifiedname>
        <param>
          <type>GTestColor</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="3317" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="3317" bodyend="3362"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a55f54e26c86c7e5cb9de04b4eccd21b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::PrintFullTestCommentIfPresent</definition>
        <argsstring>(const TestInfo &amp;test_info)</argsstring>
        <name>PrintFullTestCommentIfPresent</name>
        <qualifiedname>testing::internal::PrintFullTestCommentIfPresent</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref> &amp;</type>
          <declname>test_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="3369" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="3369" bodyend="3383"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a5f5535012d4548788a5d1a4e0f18e19e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::SetUpEnvironment</definition>
        <argsstring>(Environment *env)</argsstring>
        <name>SetUpEnvironment</name>
        <qualifiedname>testing::internal::SetUpEnvironment</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1_environment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="5869" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="5869" bodyend="5869"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ac467e871e4781da3f5ebed2a4465aec4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::TearDownEnvironment</definition>
        <argsstring>(Environment *env)</argsstring>
        <name>TearDownEnvironment</name>
        <qualifiedname>testing::internal::TearDownEnvironment</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1_environment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="5870" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="5870" bodyend="5870"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a4a8708bfb808411f9d918c7356ae7362" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::PrintOnOneLine</definition>
        <argsstring>(const char *str, int max_length)</argsstring>
        <name>PrintOnOneLine</name>
        <qualifiedname>testing::internal::PrintOnOneLine</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6238" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6238" bodyend="6254"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a2f21ce3f4b108d68c4116cfbd30724a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * testing::internal::ParseFlagValue</definition>
        <argsstring>(const char *str, const char *flag_name, bool def_optional)</argsstring>
        <name>ParseFlagValue</name>
        <qualifiedname>testing::internal::ParseFlagValue</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>def_optional</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6427" column="19" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6427" bodyend="6453"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a9118653c7dda85109ef40d44c5f40f2d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::ParseFlag</definition>
        <argsstring>(const char *str, const char *flag_name, bool *value)</argsstring>
        <name>ParseFlag</name>
        <qualifiedname>testing::internal::ParseFlag</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6465" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6465" bodyend="6475"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ad45f610f1204dd6b78767f78a113cc10" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class_string" kindref="compound">String</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool testing::internal::ParseFlag</definition>
        <argsstring>(const char *str, const char *flag_name, String *value)</argsstring>
        <name>ParseFlag</name>
        <qualifiedname>testing::internal::ParseFlag</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag_name</declname>
        </param>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_string" kindref="compound">String</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6498" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6498" bodyend="6508"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a6fff795269f50673e358438721710d6f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::HasGoogleTestFlagPrefix</definition>
        <argsstring>(const char *str)</argsstring>
        <name>HasGoogleTestFlagPrefix</name>
        <qualifiedname>testing::internal::HasGoogleTestFlagPrefix</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6516" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6516" bodyend="6522"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a7d8c446a29c7e22d7d4dde8f530bb57e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::PrintColorEncoded</definition>
        <argsstring>(const char *str)</argsstring>
        <name>PrintColorEncoded</name>
        <qualifiedname>testing::internal::PrintColorEncoded</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6533" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6533" bodyend="6565"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a2f8556fdd6cfeb81e799a8ae2fcc3566" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::ParseGoogleTestFlag</definition>
        <argsstring>(const char *const arg)</argsstring>
        <name>ParseGoogleTestFlag</name>
        <qualifiedname>testing::internal::ParseGoogleTestFlag</qualifiedname>
        <param>
          <type>const char *const</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6663" column="13" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6663" bodyend="6695"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ae4c46ce8c3d016848fff52cc5133f2ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::ParseGoogleTestFlagsOnlyImpl</definition>
        <argsstring>(int *argc, CharType **argv)</argsstring>
        <name>ParseGoogleTestFlagsOnlyImpl</name>
        <qualifiedname>testing::internal::ParseGoogleTestFlagsOnlyImpl</qualifiedname>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>CharType **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6719" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6719" bodyend="6766"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ac3c6fa93391768aa91c6238b31aaeeb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::InitGoogleTestImpl</definition>
        <argsstring>(int *argc, CharType **argv)</argsstring>
        <name>InitGoogleTestImpl</name>
        <qualifiedname>testing::internal::InitGoogleTestImpl</qualifiedname>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>CharType **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/src/gtest.cc" line="6847" column="6" bodyfile="build/_deps/googletest-src/googletest/src/gtest.cc" bodystart="6847" bodyend="6872"/>
      </memberdef>
      <memberdef kind="function" id="googletest-listener-test_8cc_1a7e113e9c70d45d89fe1703e58ff083b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST_F</definition>
        <argsstring>(ListenerTest, DoesFoo)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>testing::internal::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_listener_test" kindref="compound">ListenerTest</ref></type>
        </param>
        <param>
          <type>DoesFoo</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-listener-test.cc" line="219" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-listener-test.cc" bodystart="219" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="googletest-listener-test_8cc_1a02cef32090020d164460dd3d9f8e2852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST_F</definition>
        <argsstring>(ListenerTest, DoesBar)</argsstring>
        <name>TEST_F</name>
        <qualifiedname>testing::internal::TEST_F</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_listener_test" kindref="compound">ListenerTest</ref></type>
        </param>
        <param>
          <type>DoesBar</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-listener-test.cc" line="226" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-listener-test.cc" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a0c1e055c001e4dbb874f00a46c25bb00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(IsXDigitTest, WorksForNarrowAscii)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>IsXDigitTest</type>
        </param>
        <param>
          <type>WorksForNarrowAscii</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="57" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="57" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a7cd9d67d4164d2aeb4ceb3ed253c7d2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(IsXDigitTest, ReturnsFalseForNarrowNonAscii)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>IsXDigitTest</type>
        </param>
        <param>
          <type>ReturnsFalseForNarrowNonAscii</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="70" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1af76bca685fddffc0ecda1464b1b6a0a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(IsXDigitTest, WorksForWideAscii)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>IsXDigitTest</type>
        </param>
        <param>
          <type>WorksForWideAscii</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="75" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="75" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a771232ed3801fa49cbd4bbe11b318fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(IsXDigitTest, ReturnsFalseForWideNonAscii)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>IsXDigitTest</type>
        </param>
        <param>
          <type>ReturnsFalseForWideNonAscii</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="88" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="88" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a5d2ec1128c80363b06070f403f682490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ImplicitCastTest, ConvertsPointers)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ImplicitCastTest</type>
        </param>
        <param>
          <type>ConvertsPointers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="112" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a1b304dcd3ac71095f2e7d9e9b43c4755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ImplicitCastTest, CanUseInheritance)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ImplicitCastTest</type>
        </param>
        <param>
          <type>CanUseInheritance</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="117" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a8554484c7c0ea536bc393c254490aaff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ImplicitCastTest, CanUseNonConstCastOperator)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ImplicitCastTest</type>
        </param>
        <param>
          <type>CanUseNonConstCastOperator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="135" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="135" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1af7f631f9fbde27b19a65d50fc29e1420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ImplicitCastTest, CanUseConstCastOperatorOnConstValues)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ImplicitCastTest</type>
        </param>
        <param>
          <type>CanUseConstCastOperatorOnConstValues</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="154" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="154" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a62a3b62658f9d47733cb7b5c8f69b2ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ImplicitCastTest, CanSelectBetweenConstAndNonConstCasrAppropriately)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ImplicitCastTest</type>
        </param>
        <param>
          <type>CanSelectBetweenConstAndNonConstCasrAppropriately</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="179" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="179" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1ad5c2cf37cc5aa78744012255cae78f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ImplicitCastTest, CanUseImplicitConstructor)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ImplicitCastTest</type>
        </param>
        <param>
          <type>CanUseImplicitConstructor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="200" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="200" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a26d00130a017a66d0d60dc5a02a13d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(GtestCheckSyntaxTest, BehavesLikeASingleStatement)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>GtestCheckSyntaxTest</type>
        </param>
        <param>
          <type>BehavesLikeASingleStatement</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="214" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="214" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a4dfd147ff396984fca799878cb53dcea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(GtestCheckSyntaxTest, WorksWithSwitch)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>GtestCheckSyntaxTest</type>
        </param>
        <param>
          <type>WorksWithSwitch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="233" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="233" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a1a1c20d78e9e75b9c7f2b767eb62611b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatFileLocationTest, FormatsFileLocation)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>FormatFileLocationTest</type>
        </param>
        <param>
          <type>FormatsFileLocation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="247" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1ace2f5407afdfb0767035d44b6758e4a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatFileLocationTest, FormatsUnknownFile)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>FormatFileLocationTest</type>
        </param>
        <param>
          <type>FormatsUnknownFile</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="252" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="252" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a17d1f472b6c1154de7b5b008b964ee32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatFileLocationTest, FormatsUknownLine)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>FormatFileLocationTest</type>
        </param>
        <param>
          <type>FormatsUknownLine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="258" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="258" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a1195aaf7258c5442de7aebd95acefb9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatFileLocationTest, FormatsUknownFileAndLine)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>FormatFileLocationTest</type>
        </param>
        <param>
          <type>FormatsUknownFileAndLine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="262" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="262" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a9c12f8c1ebb19906e8fa0c430d139076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatCompilerIndependentFileLocationTest, FormatsFileLocation)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>FormatCompilerIndependentFileLocationTest</type>
        </param>
        <param>
          <type>FormatsFileLocation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="267" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="267" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a65ad1cad17717c1b8ac4c2d4bef5e079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatCompilerIndependentFileLocationTest, FormatsUknownFile)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>FormatCompilerIndependentFileLocationTest</type>
        </param>
        <param>
          <type>FormatsUknownFile</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="271" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a0315a64a661f249628f2884080e0614f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatCompilerIndependentFileLocationTest, FormatsUknownLine)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>FormatCompilerIndependentFileLocationTest</type>
        </param>
        <param>
          <type>FormatsUknownLine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="276" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="276" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a8b9aee556f3dec6e67c35830ba55e0bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatCompilerIndependentFileLocationTest, FormatsUknownFileAndLine)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>FormatCompilerIndependentFileLocationTest</type>
        </param>
        <param>
          <type>FormatsUknownFileAndLine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="280" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="280" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a5ad8299ae9325382f01b945f4f81711e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(GetThreadCountTest, ReturnsZeroWhenUnableToCountThreads)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>GetThreadCountTest</type>
        </param>
        <param>
          <type>ReturnsZeroWhenUnableToCountThreads</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="354" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="354" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1afabff70df09a0e4fcda96dd36460c2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(GtestCheckDeathTest, DiesWithCorrectOutputOnFailure)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>GtestCheckDeathTest</type>
        </param>
        <param>
          <type>DiesWithCorrectOutputOnFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="359" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="359" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a198f7132f76dd44d48dac54dc5d38fbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(RegexEngineSelectionTest, SelectsCorrectRegexEngine)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>RegexEngineSelectionTest</type>
        </param>
        <param>
          <type>SelectsCorrectRegexEngine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="392" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="392" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a0b658d88cea3a2fe6775b1b269c0204b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(CaptureTest, CapturesStdout)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>CaptureTest</type>
        </param>
        <param>
          <type>CapturesStdout</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="923" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="923" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1abbc9510a4f690912c32835213d95198f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(CaptureTest, CapturesStderr)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>CaptureTest</type>
        </param>
        <param>
          <type>CapturesStderr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="933" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="933" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a341ff65f3ca44b27fc51f03a9a05bee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(CaptureTest, CapturesStdoutAndStderr)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>CaptureTest</type>
        </param>
        <param>
          <type>CapturesStdoutAndStderr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="944" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="944" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a325a786fb22b87e5aa8d8f584b42ab09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(CaptureDeathTest, CannotReenterStdoutCapture)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>CaptureDeathTest</type>
        </param>
        <param>
          <type>CannotReenterStdoutCapture</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="953" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="953" bodyend="961"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1af366e28e373f36480decc2ea586f48f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ThreadLocalTest, DefaultConstructorInitializesToDefaultValues)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ThreadLocalTest</type>
        </param>
        <param>
          <type>DefaultConstructorInitializesToDefaultValues</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="965" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="965" bodyend="971"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a5a52dd578217050e621ebd2aace97a70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ThreadLocalTest, SingleParamConstructorInitializesToParam)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ThreadLocalTest</type>
        </param>
        <param>
          <type>SingleParamConstructorInitializesToParam</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="973" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="973" bodyend="980"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a6dffc8331590224259b60e855ad07d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ThreadLocalTest, ValueDefaultContructorIsNotRequiredForParamVersion)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ThreadLocalTest</type>
        </param>
        <param>
          <type>ValueDefaultContructorIsNotRequiredForParamVersion</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="988" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="988" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1a0e7c2d58a313bec0821df19f44351d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ThreadLocalTest, GetAndPointerReturnSameValue)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ThreadLocalTest</type>
        </param>
        <param>
          <type>GetAndPointerReturnSameValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="993" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="993" bodyend="1001"/>
      </memberdef>
      <memberdef kind="function" id="googletest-port-test_8cc_1aaed45d6ba960f02e8d3d042c606bc98e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ThreadLocalTest, PointerAndConstPointerReturnSameValue)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ThreadLocalTest</type>
        </param>
        <param>
          <type>PointerAndConstPointerReturnSameValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" line="1003" column="1" bodyfile="build/_deps/googletest-src/googletest/test/googletest-port-test.cc" bodystart="1003" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1ab7370f3a2461bb7602b048e3c140847d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TYPED_TEST_SUITE</definition>
        <argsstring>(TestSuiteWithCommentTest, Types&lt; int &gt;)</argsstring>
        <name>TYPED_TEST_SUITE</name>
        <qualifiedname>testing::internal::TYPED_TEST_SUITE</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_test_suite_with_comment_test" kindref="compound">TestSuiteWithCommentTest</ref></type>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1_types" kindref="compound">Types</ref>&lt; int &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" line="99" column="1" declfile="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" declline="99" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1aa4cae73343b0921283c4d0737847f440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TYPED_TEST</definition>
        <argsstring>(TestSuiteWithCommentTest, Dummy)</argsstring>
        <name>TYPED_TEST</name>
        <qualifiedname>testing::internal::TYPED_TEST</qualifiedname>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_test_suite_with_comment_test" kindref="compound">TestSuiteWithCommentTest</ref></type>
        </param>
        <param>
          <type>Dummy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" line="100" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1a9ac879683abb06d1c0bba3a339ea2f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ApiTest, UnitTestImmutableAccessorsWork)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ApiTest</type>
        </param>
        <param>
          <type>UnitTestImmutableAccessorsWork</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" line="108" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" bodystart="108" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1adcfd37a66bc4cb0e8291cf46e1a6c72b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AssertionResult</type>
        <definition>AssertionResult testing::internal::IsNull</definition>
        <argsstring>(const char *str)</argsstring>
        <name>IsNull</name>
        <qualifiedname>testing::internal::IsNull</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" line="132" column="17" bodyfile="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1a1aef4ac7102e97f0941178e0ecf5c776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ApiTest, TestSuiteImmutableAccessorsWork)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ApiTest</type>
        </param>
        <param>
          <type>TestSuiteImmutableAccessorsWork</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" line="139" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" bodystart="139" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1a765c62c0b121a84326d39383273f7c91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ApiTest, TestSuiteDisabledAccessorsWork)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ApiTest</type>
        </param>
        <param>
          <type>TestSuiteDisabledAccessorsWork</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" line="200" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" bodystart="200" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1a9ed5f89c92532506899e3908e79af4de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ApiTest, DISABLED_Dummy1)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>ApiTest</type>
        </param>
        <param>
          <type>DISABLED_Dummy1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" line="221" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1a4a84433419426d1c1b87ce998267b0d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(DISABLED_Test, Dummy2)</argsstring>
        <name>TEST</name>
        <qualifiedname>testing::internal::TEST</qualifiedname>
        <param>
          <type>DISABLED_Test</type>
        </param>
        <param>
          <type>Dummy2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" line="222" column="1" bodyfile="build/_deps/googletest-src/googletest/test/gtest-unittest-api_test.cc" bodystart="222" bodyend="222"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="build/_deps/googletest-src/googlemock/include/gmock/gmock-actions.h" line="163" column="1"/>
  </compounddef>
</doxygen>
