<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespacetesting_1_1gmock__matchers__test" kind="namespace" language="C++">
    <compoundname>testing::gmock_matchers_test</compoundname>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_container_helper" prot="public">testing::gmock_matchers_test::ContainerHelper</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_greater_than_matcher" prot="public">testing::gmock_matchers_test::GreaterThanMatcher</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_gtest_greater_than_matcher" prot="public">testing::gmock_matchers_test::GtestGreaterThanMatcher</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_g_test_matcher_test_p" prot="public">testing::gmock_matchers_test::GTestMatcherTestP</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1vector" prot="public">testing::gmock_matchers_test::vector</innerclass>
    <innernamespace refid="namespacetesting_1_1gmock__matchers__test_1_1adl__test">testing::gmock_matchers_test::adl_test</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__matchers__test_1_1convertible__from__any">testing::gmock_matchers_test::convertible_from_any</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__matchers__test_1_1matcher__test">testing::gmock_matchers_test::matcher_test</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="gmock-matchers__test_8h_1a382b15c448c9e006bdf38943dd964cf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1gmock__matchers__test_1_1_gtest_greater_than_matcher" kindref="compound">GtestGreaterThanMatcher</ref>&lt; typename std::decay&lt; T &gt;::type &gt;</type>
        <definition>GtestGreaterThanMatcher&lt; typename std::decay&lt; T &gt;::type &gt; testing::gmock_matchers_test::GtestGreaterThan</definition>
        <argsstring>(T &amp;&amp;rhs)</argsstring>
        <name>GtestGreaterThan</name>
        <qualifiedname>testing::gmock_matchers_test::GtestGreaterThan</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers_test.h" line="126" column="26" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers_test.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8h_1a738a538e1705ea49670aeb3ed25108e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string testing::gmock_matchers_test::Describe</definition>
        <argsstring>(const Matcher&lt; T &gt; &amp;m)</argsstring>
        <name>Describe</name>
        <qualifiedname>testing::gmock_matchers_test::Describe</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers_test.h" line="171" column="13" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers_test.h" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8h_1a96c18b92dede79060a7303fe5d178faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string testing::gmock_matchers_test::DescribeNegation</definition>
        <argsstring>(const Matcher&lt; T &gt; &amp;m)</argsstring>
        <name>DescribeNegation</name>
        <qualifiedname>testing::gmock_matchers_test::DescribeNegation</qualifiedname>
        <param>
          <type>const <ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers_test.h" line="177" column="13" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers_test.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8h_1a54e38d7df891801181af4c2acc38c3d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatcherType</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string testing::gmock_matchers_test::Explain</definition>
        <argsstring>(const MatcherType &amp;m, const Value &amp;x)</argsstring>
        <name>Explain</name>
        <qualifiedname>testing::gmock_matchers_test::Explain</qualifiedname>
        <param>
          <type>const MatcherType &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const Value &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers_test.h" line="183" column="13" bodyfile="build/_deps/googletest-src/googlemock/test/gmock-matchers_test.h" bodystart="183" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8h_1a0b5ca34cad987efb767ee62300489e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>GTEST_API_ std::string testing::internal::FormatMatcherDescription</definition>
        <argsstring>(bool negation, const char *matcher_name, const std::vector&lt; const char * &gt; &amp;param_names, const Strings &amp;param_values)</argsstring>
        <name>FormatMatcherDescription</name>
        <qualifiedname>testing::gmock_matchers_test::FormatMatcherDescription</qualifiedname>
        <param>
          <type>bool</type>
          <declname>negation</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>matcher_name</declname>
        </param>
        <param>
          <type>const std::vector&lt; const char * &gt; &amp;</type>
          <declname>param_names</declname>
        </param>
        <param>
          <type>const Strings &amp;</type>
          <declname>param_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers_test.h" line="87" column="1" bodyfile="build/_deps/googletest-src/googlemock/src/gmock-matchers.cc" bodystart="52" bodyend="60"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="gmock-matchers__test_8h_1a0bc587b0c4e6a800cdff5c014b0fe90a" prot="public" static="no">
        <type>::std::vector&lt;::std::string &gt;</type>
        <definition>typedef ::std::vector&lt;::std::string&gt; testing::internal::Strings</definition>
        <argsstring></argsstring>
        <name>Strings</name>
        <qualifiedname>testing::gmock_matchers_test::Strings</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers_test.h" line="93" column="1" bodyfile="build/_deps/googletest-src/googletest/include/gtest/gtest-printers.h" bodystart="1190" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="build/_deps/googletest-src/googlemock/test/gmock-matchers-arithmetic_test.cc" line="48" column="1"/>
  </compounddef>
</doxygen>
